{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\56975\\\\Desktop\\\\ian_analytics\\\\frontend\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport ReactFlow, { MiniMap, addEdge, removeElements, Controls, Background } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      red_neuronal_list: [],\n      dir_excel: null,\n      datos_excel: [],\n      columns_excel: [],\n      columns_excel_sin_datetime: [],\n      activeItem: {\n        id: null,\n        title: '',\n        completed: false\n      },\n      editing: false,\n      count: 0,\n      //Contador utilizado para reconocer la posición de visualización de datos\n      numero_paginas: 0,\n      //Número de paginas según el total de datos y cantidad de datos por páginas\n      filtered: [],\n      //Datos filtrados separados por la cant de datos a visualizar\n      busquedadTableExcel: '',\n      pageNumber: 0,\n      //deja la page 1 activada\n      columna_seleccionada: '',\n      // Columna selecciona por un form select permitiendo visualizar la columna target\n      datos_entrenamiento: [],\n      count_predict_original: 0,\n      //Contador utilizado para reconocer la posición de visualización de datos\n      nro_pag_total_predict_original: 0,\n      //Número de paginas según el total de datos y cantidad de datos por páginas\n      nro_pag_actual_predict_original: 0,\n      //deja la page 1 activada\n\n      /* Estructura de la red neuronal */\n      hidden_cap1: 0,\n      hidden_cap2: 0,\n      hidden_cap3: 0,\n      hidden_cap4: 0,\n      hidden_cap5: 0,\n      hidden_cap6: 0,\n      len_train_dataset: '',\n      len_val_dataset: '',\n      len_test_dataset: '',\n      red_neuronal_type: '',\n      class_names: [],\n      // ej: 1: iris setosa, 2:iris versicolor\n      target_predecir_after_train: '',\n      //Se guarda el target predicho luego del entrenamiento neuronal\n      consult_red_neuronal: '',\n      //Se guardan para enviar los datos para predecir\n      result_predict: '',\n      porcentaje_predict: 0,\n      pre_loading_train: 0,\n      loagind_training: 0,\n      post_loading_training: 0,\n      elements_public: []\n    };\n    this.fetchTasks = this.fetchTasks.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getCookie = this.getCookie.bind(this);\n    this.startEdit = this.startEdit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.strikeUnstrike = this.strikeUnstrike.bind(this);\n    this.run_red_neuronal = this.run_red_neuronal.bind(this);\n    this.handleChange_neural = this.handleChange_neural.bind(this);\n    this.handleSubmit_neural = this.handleSubmit_neural.bind(this);\n    this.buscadorTableExcel = this.buscadorTableExcel.bind(this);\n    this.handlePageClick = this.handlePageClick.bind(this);\n    this.selectColumnTable = this.selectColumnTable.bind(this);\n    this.clickPageTablePredictOriginals = this.clickPageTablePredictOriginals.bind(this);\n    this.modeloPredeterminadoRedNeuronal = this.modeloPredeterminadoRedNeuronal.bind(this);\n    this.consult_red_handleChange = this.consult_red_handleChange.bind(this);\n    this.consult_red_neuronal = this.consult_red_neuronal.bind(this);\n  }\n\n  /* csrftoken Ruta = 'https://docs.djangoproject.com/en/3.2/ref/csrf/' */\n  getCookie(name) {\n    var cookieValue = null;\n\n    if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n\n    return cookieValue;\n  } //Activa funciones\n\n\n  componentWillMount() {\n    this.fetchTasks();\n  }\n\n  run_red_neuronal(e) {\n    this.setState({\n      loagind_training: 1,\n      post_loading_training: 0\n    });\n    e.preventDefault();\n    /* Limpia los input y selects del form de predicciones */\n\n    if (document.getElementsByClassName(\"input\").length > 0) {\n      for (var i = 0; i < document.getElementsByClassName(\"input\").length; i++) {\n        document.getElementsByClassName(\"input\")[i].value = \"\";\n      }\n    }\n\n    var csrftoken = this.getCookie('csrftoken');\n    var url = 'http://127.0.0.1:8000/run_red_neuronal/';\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify({\n        target_predecir: this.state.columna_seleccionada,\n        datos: this.state.datos_excel\n      })\n    }).then(response => response.json()).then(data => this.setState({\n      loagind_training: 2,\n      result_predict: '',\n\n      /* Limpia el resultado de la predicción */\n      porcentaje_predict: 0,\n      datos_entrenamiento: data,\n      nro_pag_total_predict_original: Math.ceil(data[0].df_originals_predictions_json.length / 5),\n      target_predecir_after_train: data[0].target_predecir_after_train,\n      len_train_dataset: data[0].len_train_dataset,\n      len_val_dataset: data[0].len_val_dataset,\n      len_test_dataset: data[0].len_test_dataset,\n      red_neuronal_type: data[0].tipo_red_neuronal,\n      class_names: data[0].class_names\n    }, () => console.log(\"\"), console.log(\"data[0].class_names\"), console.log()));\n  } // Listando Tasks\n\n\n  fetchTasks() {\n    fetch('http://127.0.0.1:8000/task-list/').then(response => response.json()).then(data => this.setState({\n      todoList: data\n    }, () => {\n      console.log(\"\");\n    }));\n  }\n\n  handleChange_neural(e) {\n    /* if (document.getElementsByClassName(\"react-flow\").length > 0){\n      document.querySelector('.react-flow__renderer svg').remove('svg')\n      console.log(\"\")\n      setTimeout(() => {  console.log(\"World!\"); }, 5000);\n    } */\n    this.setState({\n      dir_excel: e.target.files[0]\n    });\n  } //Agregando\n\n\n  handleChange(e) {\n    var name = e.target.name;\n    var value = e.target.value;\n    console.log('Name:', name);\n    console.log('Value:', value);\n    this.setState({\n      activeItem: { ...this.state.activeItem,\n        title: value\n      }\n    });\n  } //Botón de enviar\n\n\n  handleSubmit_neural(e) {\n    this.setState({\n      pre_loading_train: 1,\n      elements_public: [],\n      columna_seleccionada: '',\n      hidden_cap1: 0,\n      loagind_training: 0,\n      post_loading_training: 0\n    });\n    /* Limpia el input del buscador de la tabla con los datos */\n\n    if (document.getElementsByClassName(\"search_table_excel\").length > 0) {\n      document.getElementsByClassName(\"search_table_excel\")[0].value = \"\";\n    }\n    /* Limpia el select del target */\n\n\n    if (document.getElementsByClassName(\"form_select_target\").length > 0) {\n      document.getElementsByClassName(\"form_select_target\")[0].value = \"\";\n    }\n\n    e.preventDefault();\n    let formData = new FormData();\n    formData.append('dir_excel', this.state.dir_excel);\n    var csrftoken = this.getCookie('csrftoken');\n    var url = 'http://127.0.0.1:8000/load_data/';\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json, text/plain, */*'\n      },\n      body: formData\n    }).then(response => response.json()).then(data => this.setState({\n      pre_loading_train: 2,\n      count: 0,\n\n      /* Al cargar un nuevo dataset vuelve a la pag. 1 */\n      pageNumber: 0,\n\n      /* Al cargar un nuevo dataset vuelve a la pag. 1 */\n      busquedadTableExcel: '',\n\n      /* Limpia el buscador al cargar un nuevo dataset */\n      datos_excel: data[0].datos_json,\n      columns_excel: data[0].datos_json[0],\n      columns_excel_sin_datetime: data[0].dataframe_sin_datetime[0],\n\n      /* numero_paginas: Math.ceil(data.length/5) */\n      numero_paginas: Math.ceil(data[0].datos_json.length / 5)\n    }, () => {\n      this.modeloPredeterminadoRedNeuronal();\n    }));\n  } //Botón de enviar\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    /* csrftoken */\n\n    var csrftoken = this.getCookie('csrftoken');\n    var url = 'http://127.0.0.1:8000/task-create/';\n\n    if (this.state.editing == true) {\n      /* EDITANDO */\n      url = `http://127.0.0.1:8000/task-update/${this.state.activeItem.id}/`;\n      this.setState({\n        editing: false\n      });\n    }\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n\n        /* csrftoken */\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify(this.state.activeItem)\n    }).then(response => {\n      this.fetchTasks();\n      this.setState({\n        activeItem: {\n          id: null,\n          title: '',\n          completed: false\n        }\n      });\n    }).catch(function (error) {\n      console.log('ERROR:', error);\n    });\n  }\n  /* EDITAR */\n\n\n  startEdit(task) {\n    this.setState({\n      activeItem: task,\n      editing: true\n    });\n  }\n  /* ELIMINAR */\n\n\n  deleteItem(task) {\n    var csrftoken = this.getCookie('csrftoken');\n    fetch(`http://127.0.0.1:8000/task-delete/${task.id}/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      }\n    }).then(response => {\n      this.fetchTasks();\n    });\n  }\n  /* Subrayado */\n\n\n  strikeUnstrike(task) {\n    task.completed = !task.completed;\n    var csrftoken = this.getCookie('csrftoken');\n    var url = `http://127.0.0.1:8000/task-update/${task.id}/`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify({\n        'completed': task.completed,\n        'title': task.title\n      })\n    }).then(() => {\n      this.fetchTasks();\n    });\n    console.log(\"\");\n  }\n  /* Función de Input Type File */\n\n\n  btn_input_file_active() {\n    document.querySelector(\"#ruta_excel\").click();\n    document.querySelector(\"#ruta_excel\").addEventListener(\"change\", function () {\n      if (this.value) {\n        let valueStore = this.value.split('\\\\');\n        document.querySelector(\".file_name\").textContent = valueStore[valueStore.length - 1];\n      } else {\n        document.querySelector(\".file_name\").textContent = \"Ningún archivo seleccionado\";\n      }\n    });\n  }\n  /* Filtro para la tabla */\n\n  /* filteredDataExcel(prevProps, prevState) { */\n\n\n  filteredDataExcel() {\n    if (this.state.busquedadTableExcel.length === 0) {\n      return [this.state.datos_excel.slice(this.state.count, this.state.count + 5), Math.ceil(this.state.datos_excel.length / 5)];\n    }\n\n    const filtered = this.state.datos_excel.filter(item => {\n      return Object.keys(item).some(key => item[key].toString().toLowerCase().includes(this.state.busquedadTableExcel.toLowerCase()));\n    }); //const filtered = this.state.datos_excel.filter( poke => poke.Equipo.toLowerCase().includes(this.state.busquedadTableExcel.toLowerCase()))\n\n    return [filtered.slice(this.state.count, this.state.count + 5), Math.ceil(filtered.length / 5)];\n  }\n\n  buscadorTableExcel(e) {\n    this.setState({\n      count: 0,\n      pageNumber: 0,\n      busquedadTableExcel: e.target.value\n    }, () => {\n      this.setState({\n        numero_paginas: this.filteredDataExcel()[1]\n      });\n      this.colorselectColumnTable();\n    });\n  }\n\n  handlePageClick(e) {\n    this.setState({\n      count: e.selected * 5,\n      pageNumber: e.selected\n    }, () => {\n      this.colorselectColumnTable();\n    });\n  }\n\n  selectColumnTable(e) {\n    if (e.target.value == '') {\n      this.setState({\n        columna_seleccionada: '',\n        elements_public: []\n      }, () => {\n        this.colorselectColumnTable();\n        this.modeloPredeterminadoRedNeuronal();\n      });\n    } else {\n      this.setState({\n        columna_seleccionada: e.target.value,\n        elements_public: []\n      }, () => {\n        this.colorselectColumnTable();\n      });\n      e.preventDefault();\n      var csrftoken = this.getCookie('csrftoken');\n      var url = 'http://127.0.0.1:8000/detect_type_neuronal/';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n          'X-CSRFToken': csrftoken\n        },\n        body: JSON.stringify({\n          target_predecir: e.target.value,\n          datos: this.state.datos_excel\n        })\n      }).then(response => response.json()).then(data => this.setState({\n        red_neuronal_type: data[0].tipo_red_neuronal,\n        hidden_cap1: data[0].hidden_cap1\n      }, () => {\n        this.modeloPredeterminadoRedNeuronal();\n      }));\n    }\n  }\n\n  colorselectColumnTable() {\n    /* Elimina la columna seleccionada anteriormente (Remueve la clase activeColorTable) */\n    var td = document.createElement('td');\n    td.classList.remove(\"activeColorTable\");\n    document.querySelectorAll(\".activeColorTable\").forEach(function (element) {\n      element.classList.remove(\"activeColorTable\");\n    });\n    /* Selecciona la columna indica por form select */\n\n    var element = document.getElementsByClassName(this.state.columna_seleccionada);\n\n    for (var i = 0; i < element.length; i++) {\n      element[i].className += \" activeColorTable\";\n    }\n  }\n\n  filteredDataOriginalsPredict() {\n    return this.state.datos_entrenamiento[0].df_originals_predictions_json.slice(this.state.count_predict_original, this.state.count_predict_original + 5);\n  }\n\n  clickPageTablePredictOriginals(e) {\n    this.setState({\n      count_predict_original: e.selected * 5,\n      nro_pag_actual_predict_original: e.selected\n    });\n  }\n  /* Librería reactflow*/\n\n\n  modeloPredeterminadoRedNeuronal() {\n    const onLoad = reactFlowInstance => reactFlowInstance.fitView();\n\n    let elements = [];\n    elements.push({\n      id: 'input_layer',\n      sourcePosition: 'right',\n      type: 'input',\n      data: {\n        label: 'Input Layer'\n      },\n      position: {\n        x: 50,\n        y: 0\n      }\n    });\n    elements.push({\n      id: 'hidden_layer',\n      sourcePosition: 'right',\n      type: 'input',\n      data: {\n        label: 'Hidden Layers'\n      },\n      position: {\n        x: 300,\n        y: 0\n      }\n    });\n    elements.push({\n      id: 'output_layer',\n      sourcePosition: 'right',\n      type: 'input',\n      data: {\n        label: 'Output Layer'\n      },\n      position: {\n        x: 550,\n        y: 0\n      }\n    });\n    elements.push({\n      id: 'total_neurons_output_layer',\n      sourcePosition: 'right',\n      type: 'input',\n      data: {\n        label: '1 neurona'\n      },\n      position: {\n        x: 550,\n        y: 42\n      }\n    });\n    /* Se crea el array que contiene las neuronas de la input layer  */\n\n    const elements_input_layer = [];\n    Object.keys(this.state.columns_excel_sin_datetime).map((key, i) => {\n      return [elements_input_layer.push(key)];\n    });\n    /* Elimina la columna target del array de la input layer*/\n\n    if (this.state.columna_seleccionada != '') {\n      elements_input_layer.splice(elements_input_layer.indexOf(this.state.columna_seleccionada), 1);\n    }\n    /* Agrega como título la cantidad total de neuronas en la capa Input Layer */\n\n\n    elements.push({\n      id: 'total_neurons_input_layer',\n      sourcePosition: 'right',\n      type: 'input',\n      data: {\n        label: elements_input_layer.length + ' neuronas'\n      },\n      position: {\n        x: 50,\n        y: 42\n      }\n    });\n    /* Agrega las neuronas en la Input Layer */\n\n    var position = [80];\n    /* Constante para ubicar las neuronas en la capa, como coordenadas gps */\n\n    elements_input_layer.map((key, i) => {\n      return [elements.push({\n        id: key,\n        sourcePosition: 'right',\n        type: 'input',\n        data: {\n          label: key\n        },\n        position: {\n          x: 50,\n          y: position[0]\n        }\n      }), position.push(position[0] + 80),\n      /* position = [80, 160] */\n      position.splice(0, 1)\n      /* position = [160] # elimina la primera posición*/\n      ];\n    });\n    /* Agrega el título de la cantidad total de neuronas de la primera hidden layers*/\n\n    elements.push({\n      id: 'total_neurons_hidden_layer',\n      sourcePosition: 'right',\n      type: 'input',\n      data: {\n        label: this.state.hidden_cap1 + ' neuronas'\n      },\n      position: {\n        x: 300,\n        y: 42\n      }\n    });\n    /* Creación de las neuronas de la hidden layers 1 */\n\n    /* Unión entre las neuronas de la hidden layers 1 e Input Layer*/\n\n    if (this.state.hidden_cap1 !== 0) {\n      if (this.state.hidden_cap1 <= 8) {\n        for (var i = this.state.hidden_cap1; i > 0; i--) {\n          /* Crea las neuronas */\n          elements.push({\n            id: 'capaOculta1_neurona' + i,\n            targetPosition: 'left',\n            sourcePosition: 'right',\n            data: {\n              label: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Neurona \", i]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 122\n              }, this)\n            },\n            position: {\n              x: 300,\n              y: 80 * i\n            }\n          });\n          /* Agrega las conexiones entre la input layer y la primera hidden layer */\n\n          elements_input_layer.map(neurona => {\n            elements.push({\n              id: 'e' + i,\n              source: neurona,\n              target: 'capaOculta1_neurona' + i,\n              animated: true,\n              style: {\n                stroke: '#5da7d6'\n              }\n            });\n          });\n        }\n      } else {\n        let cant_total_neuronas = this.state.hidden_cap1;\n\n        for (var i = this.state.hidden_cap1; i > 0; i--) {\n          if (i == cant_total_neuronas) {\n            elements.push({\n              id: 'capaOculta1_neurona' + i,\n              targetPosition: 'left',\n              sourcePosition: 'right',\n              data: {\n                label: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [\"Neurona \", i]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 124\n                }, this)\n              },\n              position: {\n                x: 300,\n                y: 640\n              }\n            });\n            elements.push({\n              id: 'punto_seguido1',\n              className: 'punto_seguido',\n              data: {\n                label: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 95\n                }, this)\n              },\n              position: {\n                x: 300,\n                y: 550\n              }\n            });\n            elements.push({\n              id: 'punto_seguido2',\n              className: 'punto_seguido',\n              data: {\n                label: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 94\n                }, this)\n              },\n              position: {\n                x: 300,\n                y: 570\n              }\n            });\n            elements.push({\n              id: 'punto_seguido3',\n              className: 'punto_seguido',\n              data: {\n                label: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 94\n                }, this)\n              },\n              position: {\n                x: 300,\n                y: 590\n              }\n            });\n            elements_input_layer.map(neurona => {\n              elements.push({\n                id: 'e3' + i,\n                source: neurona,\n                target: 'capaOculta1_neurona' + i,\n                animated: true,\n                style: {\n                  stroke: '#5da7d6'\n                }\n              });\n            });\n          }\n\n          if (i <= 6) {\n            /* Crea las neuronas */\n            elements.push({\n              id: 'capaOculta1_neurona' + i,\n              targetPosition: 'left',\n              sourcePosition: 'right',\n              data: {\n                label: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [\"Neurona \", i]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 124\n                }, this)\n              },\n              position: {\n                x: 300,\n                y: 80 * i\n              }\n            });\n            /* Agrega las conexiones entre la input layer y la primera hidden layer */\n\n            elements_input_layer.map(neurona => {\n              elements.push({\n                id: 'e3' + i,\n                source: neurona,\n                target: 'capaOculta1_neurona' + i,\n                animated: true,\n                style: {\n                  stroke: '#5da7d6'\n                }\n              });\n            });\n          }\n        }\n      }\n    }\n    /* Agrega la neurona de la capa Output Layer */\n\n\n    if (this.state.columna_seleccionada != '') {\n      elements.push({\n        id: this.state.columna_seleccionada,\n        targetPosition: 'left',\n        type: 'output',\n        data: {\n          label: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.columna_seleccionada\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 115\n          }, this)\n        },\n        position: {\n          x: 550,\n          y: position[0] / 2\n        }\n      });\n    }\n    /* Unión (conexión) entre las neuronas de la hidden layer y Output layer */\n\n\n    for (var i = 6; i > 0; i--) {\n      if (this.state['hidden_cap' + i] !== 0) {\n        /* if('this.state.hidden_cap'+i !== 0){ */\n        for (var neu = 1; neu <= this.state['hidden_cap' + i]; neu++) {\n          /* console.log('capaOculta' + i + '_neurona' + neu) */\n          if (neu < 7 || neu == this.state['hidden_cap' + i]) {\n            elements.push({\n              id: 'e4' + i + neu,\n              source: 'capaOculta' + i + '_neurona' + neu,\n              target: this.state.columna_seleccionada,\n              animated: true,\n              style: {\n                stroke: '#5da7d6'\n              }\n            });\n          }\n        }\n      }\n    }\n\n    this.setState({\n      elements_public: elements\n    });\n    return elements;\n  }\n\n  consult_red_handleChange(e) {\n    if (e.target.name == 'select') {\n      const value = e.target.value;\n      const name = e.target.value;\n      this.setState({\n        consult_red_neuronal: { ...this.state.consult_red_neuronal,\n          [name]: value\n        }\n      });\n    } else {\n      const value = e.target.value;\n      const name = e.target.name;\n      this.setState({\n        consult_red_neuronal: { ...this.state.consult_red_neuronal,\n          [name]: value\n        }\n      });\n    }\n  }\n  /* Consultar la Red Neuronal */\n\n\n  consult_red_neuronal(e) {\n    this.setState({\n      post_loading_training: 1\n    });\n    console.log(this.state.consult_red_neuronal);\n    e.preventDefault();\n    var csrftoken = this.getCookie('csrftoken');\n    var url = 'http://127.0.0.1:8000/consult_red_neuronal/';\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify({\n        data_consult_red_neuronal: this.state.consult_red_neuronal,\n        red_neuronal_type: this.state.red_neuronal_type,\n        class_names: this.state.class_names\n      })\n    }).then(response => response.json()).then(data => this.setState({\n      post_loading_training: 2,\n      result_predict: data[0].result_predict,\n      porcentaje_predict: data[0].porcentaje_predict\n    }, () => console.log(data[0].result_predict), console.log(\"RESULTADO PREDICT: \")));\n  }\n\n  render() {\n    var tasks = this.state.todoList;\n    var datos_excel = this.state.datos_excel;\n    var columnas_excel = this.state.columns_excel;\n    var columnas_excel_sin_datetime = this.state.columns_excel_sin_datetime;\n    var self = this;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background_one\",\n        style: {\n          'background-image': 'url(../files/bg_light_blue_right.png)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title_principal text-gradient-blue-purple\",\n          children: [\"Seleccione una\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"fuente de datos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 89\n          }, this), \"\\xA0para iniciar el proceso \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button_load_excel_grid\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit_neural,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: this.handleChange_neural,\n              type: \"file\",\n              className: \"input_file_display\",\n              id: \"ruta_excel\",\n              name: \"ruta_excel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button_load_excel_item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"btn_input_file\",\n                onClick: this.btn_input_file_active,\n                style: {\n                  'background-image': 'url(../files/cubes_red.svg)'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"icon_input_file\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"bx bx-upload\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 607,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"file_name\",\n                    children: \"Ning\\xFAn archivo seleccionado\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 608,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"title_input_file\",\n                  children: \"Seleccionar Archivo\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 610,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text_input_file\",\n                  children: \"Cargue archivos excel, archivos csv o archivos de texto.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 611,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item_btn_submit\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"btn_submit_file\",\n                  id: \"submit\",\n                  type: \"submit\",\n                  name: \"Add\",\n                  value: \"Cargar Datos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), this.state.pre_loading_train === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor_spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 13\n      }, this), this.state.pre_loading_train === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table_excel_grid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table_excel_item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"structure_table\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"title_table\",\n              children: \"Visualizaci\\xF3n del conjunto de datos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn_search_table_excel\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bx bx-search-alt-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: this.buscadorTableExcel,\n                type: \"text\",\n                placeholder: \"Buscador\",\n                className: \"search_table_excel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              id: \"customers\",\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: Object.keys(columnas_excel).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: key,\n                  children: key\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 19\n              }, this), this.filteredDataExcel()[0].map(function (list_neural) {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(columnas_excel).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: key,\n                    children: list_neural[key]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 650,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer_table_grid\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dataTables_info\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [datos_excel.length, \" filas \\xD7 \", Object.keys(columnas_excel).length - 1, \" columns\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 660,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"multipagination\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n                    previousLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"bx bx-chevron-left\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 665,\n                      columnNumber: 38\n                    }, this),\n                    nextLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"bx bx-chevron-right\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 666,\n                      columnNumber: 34\n                    }, this),\n                    breakLabel: \"...\",\n                    breakClassName: \"break-me\",\n                    pageCount: this.state.numero_paginas,\n                    marginPagesDisplayed: 2,\n                    pageRangeDisplayed: 5,\n                    forcePage: this.state.pageNumber,\n                    onPageChange: this.handlePageClick,\n                    containerClassName: \"pagination\",\n                    subContainerClassName: \"pages pagination\",\n                    activeClassName: \"active\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 664,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 663,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 11\n      }, this), this.state.pre_loading_train === 2 && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.run_red_neuronal,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select_target_grid\",\n          style: {\n            'padding-top': ''\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_select_item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"img_target\",\n              src: process.env.PUBLIC_URL + '/files/target2.png'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Seleccionar Columna a \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  'background-image': 'url(../files/decoration_title.svg)'\n                },\n                children: \"Predecir\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 43\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_select_content\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                onChange: this.selectColumnTable,\n                className: \"form_select_target\",\n                \"aria-label\": \"Default select example\",\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  selected: true,\n                  value: \"\",\n                  children: \"Seleccionar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 695,\n                  columnNumber: 23\n                }, this), Object.keys(columnas_excel_sin_datetime).filter(key => key !== '').map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n                  className: key,\n                  children: key\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 694,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"run_red_neuronal_grid\",\n          style: {\n            'padding-top': ''\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"run_red_neuronal_item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"run_red_neuronal_btn_blue_submit\",\n              id: \"submit\",\n              type: \"submit\",\n              name: \"Add\",\n              value: \"\",\n              children: [\"Entrenar Red Neuronal \", /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"bx bx-play-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }, this), this.state.pre_loading_train === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"design_neural_network\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Configuraci\\xF3n predeterminada del modelo \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: process.env.PUBLIC_URL + '/files/training_result2.png'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 57\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n          onLoad: reactFlowInstance => reactFlowInstance.fitView()\n          /* elements={this.modeloPredeterminadoRedNeuronal()} */\n          ,\n          elements: this.state.elements_public,\n          defaultZoom: 0.78,\n          defaultPosition: [200, 8],\n          style: {\n            width: '1007px',\n            height: '60vh'\n          },\n          snapToGrid: true,\n          snapGrid: [5, 5],\n          zoomOnScroll: false,\n          zoomOnPinch: false,\n          children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Background, {\n            variant: \"lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"addEdge\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 11\n      }, this), this.state.loagind_training === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor_spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 11\n      }, this), this.state.loagind_training === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar_divide_bar_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bar_divide_bar_header_img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: process.env.PUBLIC_URL + '/files/train_vali_test2.svg'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bar_divide_bar_header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"center\",\n            children: \"Divisi\\xF3n del DataFrame en conjuntos de entrenamiento, validaci\\xF3n y prueba\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bar_divide_bar_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"training_set\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"training_set_cantidad\",\n              children: [this.state.len_train_dataset, \" ejemplos\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"training_set_porcentaje\",\n              children: \"80%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"val_set\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"val_set_cantidad\",\n              children: this.state.len_val_dataset\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"val_set_porcentaje\",\n              children: \"10%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"test_set\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"test_set_cantidad\",\n              children: this.state.len_test_dataset\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"test_set_porcentaje\",\n              children: \"10%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subconjuntos training_set_conj\",\n            children: \"Training Set\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subconjuntos val_set_conj\",\n            children: \"Val Set\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subconjuntos test_set_conj\",\n            children: \"Test Set\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 11\n      }, this), this.state.loagind_training === 2 && this.state.datos_entrenamiento.map(function (list_neural, index) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graficos_connectivity_grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graf_connectivity_img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: process.env.PUBLIC_URL + '/files/connectivity2.png'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graficos_connectivity_header\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"grafico_connectivity_title\",\n                children: \"Arquitectura del modelo resultante (gr\\xE1fico de conectividad)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 790,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: process.env.PUBLIC_URL + '/files/Connectivity_graph.png',\n              target: \"_blank\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: process.env.PUBLIC_URL + '/files/Connectivity_graph.png',\n                alt: \"Image1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 795,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 15\n        }, this);\n      }), this.state.loagind_training === 2 && this.state.datos_entrenamiento.map(function (list_neural, index) {\n        if (self.state.red_neuronal_type != '') return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graficos_training_wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graficos_training_img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: process.env.PUBLIC_URL + '/files/training_result3.png'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graficos_training_header\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"graficos_training_title\",\n              children: \"Resultados del entrenamiento de la red neuronal en los conjuntos de entrenamiento y validaci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graficos_abs_square_grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph_precision\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Visualice la precisi\\xF3n del modelo a lo largo del tiempo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 826,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"img_graph_precision\",\n                dangerouslySetInnerHTML: {\n                  __html: list_neural.grafico1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 827,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 825,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph_perdida\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Visualice la funci\\xF3n de p\\xE9rdida a lo largo del tiempo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"img_graph_perdida\",\n                dangerouslySetInnerHTML: {\n                  __html: list_neural.grafico2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table_excel_grid3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"table_statics_jupyter_item\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"structure_table_statics_jupyter\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"title_table_statics_jupyter\",\n                    children: \"Rendimiento general del modelo\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 838,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                    id: \"statics_jupyter\",\n                    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(list_neural.datos_hist_tail[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                        className: key,\n                        children: key\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 842,\n                        columnNumber: 35\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 840,\n                      columnNumber: 29\n                    }, this), list_neural.datos_hist_tail.map(function (list_neural_statics) {\n                      return /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: Object.keys(list_neural.datos_hist_tail[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                          className: key,\n                          children: list_neural_statics[key] % 1 != 0 ? parseFloat(list_neural_statics[key]).toFixed(4) : list_neural_statics[key]\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 851,\n                          columnNumber: 41\n                        }, this))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 848,\n                        columnNumber: 35\n                      }, this);\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 839,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 837,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 836,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 17\n        }, this);\n      }), this.state.loagind_training === 2 && this.state.datos_entrenamiento.map(function (list_neural, index) {\n        if (self.state.red_neuronal_type === 'number') return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"statics_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"img_target\",\n            src: process.env.PUBLIC_URL + '/files/timer.svg'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section_title\",\n            children: [\"Evaluaci\\xF3n del modelo entrenado en el conjunto de datos de prueba \", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: process.env.PUBLIC_URL + '/files/acurracy.svg'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 115\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"statics_row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statics_grid loss_result\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statics_number\",\n                children: parseFloat(list_neural.loss).toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"statics_sub_title\",\n                children: \"loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 880,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statics_grid accuracy_result\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statics_number\",\n                children: parseFloat(list_neural.mae).toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 883,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"statics_sub_title\",\n                children: \"mae\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 884,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 882,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statics_grid mse_result\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statics_number\",\n                children: parseFloat(list_neural.mse).toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 887,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"statics_sub_title\",\n                children: \"mse\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 886,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 877,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 17\n        }, this);\n        if (self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary') return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"statics_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"img_target\",\n            src: process.env.PUBLIC_URL + '/files/timer.svg'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section_title\",\n            children: [\"Evaluaci\\xF3n del modelo entrenado en el conjunto de datos de prueba \", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: process.env.PUBLIC_URL + '/files/acurracy.svg'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 115\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"statics_row_Accuracy\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statics_grid loss_result\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statics_number\",\n                children: parseFloat(list_neural.loss).toFixed(0)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 901,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"statics_sub_title\",\n                children: \"loss\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 902,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statics_grid accuracy_result\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statics_number\",\n                children: [parseFloat(list_neural.mae).toFixed(0), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"statics_sub_title\",\n                children: \"Accuracy \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 906,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 17\n        }, this);\n      }), this.state.loagind_training === 2 && this.state.red_neuronal_type === 'string' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table_result_and_matris_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table_excel_grid2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table_excel_item2\",\n            children: this.state.datos_entrenamiento.map(function (data_train, index) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"structure_table\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"title_table\",\n                  children: \"Predicciones en el conjunto de prueba\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 924,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  id: \"customers\",\n                  children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: Object.keys(data_train.df_originals_predictions_json[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: key,\n                      children: key\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 928,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 926,\n                    columnNumber: 27\n                  }, this), self.filteredDataOriginalsPredict().map(function (list_neural) {\n                    if (self.state.red_neuronal_type === 'number') return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: key,\n                        children: key == '' ? list_neural[key] : parseFloat(list_neural[key]).toFixed(2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 939,\n                        columnNumber: 41\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 936,\n                      columnNumber: 35\n                    }, this);\n                    if (self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary') return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: key,\n                        children: key == '' ? list_neural[key] : list_neural[key]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 949,\n                        columnNumber: 41\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 946,\n                      columnNumber: 35\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 925,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"footer_table_grid\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"dataTables_info\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [data_train.df_originals_predictions_json.length, \" filas\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 959,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 958,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"multipagination\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n                        previousLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"bx bx-chevron-left\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 964,\n                          columnNumber: 46\n                        }, this),\n                        nextLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"bx bx-chevron-right\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 965,\n                          columnNumber: 42\n                        }, this),\n                        breakLabel: \"...\",\n                        breakClassName: \"break-me\",\n                        pageCount: self.state.nro_pag_total_predict_original,\n                        marginPagesDisplayed: 2,\n                        pageRangeDisplayed: 5,\n                        forcePage: self.state.nro_pag_actual_predict_original,\n                        onPageChange: self.clickPageTablePredictOriginals,\n                        containerClassName: \"pagination\",\n                        subContainerClassName: \"pages pagination\",\n                        activeClassName: \"active\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 963,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 962,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 961,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 957,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 923,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 17\n          }, this), this.state.datos_entrenamiento.map(function (list_neural, index) {\n            if (self.state.red_neuronal_type != '') return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph_matriz_confusion\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Matriz de confusi\\xF3n de los datos originales vs. las predicciones\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 990,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"img_graph_confusion\",\n                dangerouslySetInnerHTML: {\n                  __html: list_neural.grafico3\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 991,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 23\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 13\n      }, this), this.state.loagind_training === 2 && this.state.red_neuronal_type === 'binary' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table_result_and_matris_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table_excel_grid2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table_excel_item2\",\n            children: this.state.datos_entrenamiento.map(function (data_train, index) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"structure_table\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"title_table\",\n                  children: \"Predicciones en el conjunto de prueba\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1008,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  id: \"customers\",\n                  children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: Object.keys(data_train.df_originals_predictions_json[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: key,\n                      children: key\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1012,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1010,\n                    columnNumber: 27\n                  }, this), self.filteredDataOriginalsPredict().map(function (list_neural) {\n                    if (self.state.red_neuronal_type === 'number') return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: key,\n                        children: key == '' ? list_neural[key] : parseFloat(list_neural[key]).toFixed(2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1023,\n                        columnNumber: 41\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1020,\n                      columnNumber: 35\n                    }, this);\n                    if (self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary') return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: key,\n                        children: key == '' ? list_neural[key] : list_neural[key]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1033,\n                        columnNumber: 41\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1030,\n                      columnNumber: 35\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1009,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"footer_table_grid2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"dataTables_info\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [data_train.df_originals_predictions_json.length, \" filas\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1043,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1042,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"multipagination\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n                        previousLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"bx bx-chevron-left\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1048,\n                          columnNumber: 46\n                        }, this),\n                        nextLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"bx bx-chevron-right\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1049,\n                          columnNumber: 42\n                        }, this),\n                        breakLabel: \"...\",\n                        breakClassName: \"break-me\",\n                        pageCount: self.state.nro_pag_total_predict_original,\n                        marginPagesDisplayed: 2,\n                        pageRangeDisplayed: 5,\n                        forcePage: self.state.nro_pag_actual_predict_original,\n                        onPageChange: self.clickPageTablePredictOriginals,\n                        containerClassName: \"pagination\",\n                        subContainerClassName: \"pages pagination\",\n                        activeClassName: \"active\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1047,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1046,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1045,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1041,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1007,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1004,\n            columnNumber: 17\n          }, this), this.state.datos_entrenamiento.map(function (list_neural, index) {\n            if (self.state.red_neuronal_type != '') return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph_matriz_confusion\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Matriz de confusi\\xF3n de los datos originales vs. las predicciones\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1074,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"img_graph_confusion\",\n                dangerouslySetInnerHTML: {\n                  __html: list_neural.grafico3\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1075,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1073,\n              columnNumber: 23\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 13\n      }, this), this.state.loagind_training === 2 && this.state.red_neuronal_type === 'number' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table_result_and_matris_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table_excel_grid4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table_excel_item3\",\n            children: this.state.datos_entrenamiento.map(function (data_train, index) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"structure_table\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"title_table\",\n                  children: \"Predicciones en el conjunto de prueba\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1092,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  id: \"customers\",\n                  children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: Object.keys(data_train.df_originals_predictions_json[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: key,\n                      children: key\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1096,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1094,\n                    columnNumber: 27\n                  }, this), self.filteredDataOriginalsPredict().map(function (list_neural) {\n                    if (self.state.red_neuronal_type === 'number') return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: key,\n                        children: key == '' ? list_neural[key] : parseFloat(list_neural[key]).toFixed(2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1107,\n                        columnNumber: 41\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1104,\n                      columnNumber: 35\n                    }, this);\n                    if (self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary') return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: key,\n                        children: key == '' ? list_neural[key] : list_neural[key]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1117,\n                        columnNumber: 41\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1114,\n                      columnNumber: 35\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1093,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"footer_table_grid2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"dataTables_info\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [data_train.df_originals_predictions_json.length, \" filas\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1127,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1126,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"multipagination\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n                        previousLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"bx bx-chevron-left\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1132,\n                          columnNumber: 46\n                        }, this),\n                        nextLabel: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"bx bx-chevron-right\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1133,\n                          columnNumber: 42\n                        }, this),\n                        breakLabel: \"...\",\n                        breakClassName: \"break-me\",\n                        pageCount: self.state.nro_pag_total_predict_original,\n                        marginPagesDisplayed: 2,\n                        pageRangeDisplayed: 5,\n                        forcePage: self.state.nro_pag_actual_predict_original,\n                        onPageChange: self.clickPageTablePredictOriginals,\n                        containerClassName: \"pagination\",\n                        subContainerClassName: \"pages pagination\",\n                        activeClassName: \"active\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1131,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1130,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1129,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1091,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 13\n      }, this), this.state.loagind_training === 2 && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.consult_red_neuronal,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"consultas_red_neuronal_wrapper\"\n          /* style= {{ 'background-image': 'url(../files/redes.png)'}} */\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"consultas_red_neuronal_header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"background_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: process.env.PUBLIC_URL + '/files/studio.svg'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1163,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"center\",\n              children: \"Utilice el modelo para hacer predicciones sobre nuevos datos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1166,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"consultas_red_neuronal_container\",\n            children: [this.state.datos_entrenamiento.map(list => Object.keys(list.columns_numeric).map(number_column => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"label_input\",\n                  for: list.columns_numeric[number_column],\n                  children: [list.columns_numeric[number_column].replace('_', ' '), \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1174,\n                  columnNumber: 35\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"input\",\n                  type: \"number\",\n                  step: \"0.001\",\n                  keyboardType: \"numeric\",\n                  id: list.columns_numeric[number_column],\n                  name: list.columns_numeric[number_column],\n                  onChange: this.consult_red_handleChange,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1175,\n                  columnNumber: 35\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1173,\n                columnNumber: 33\n              }, this);\n            })), this.state.datos_entrenamiento.map(list => Object.keys(list.columnas_categoricas_onehot_json).map((name_column, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label_input\",\n                children: [\"Seleccionar \", name_column, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1190,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                onChange: this.consult_red_handleChange,\n                className: \"input\",\n                \"aria-label\": \"Default select example\",\n                name: name_column,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  selected: true,\n                  value: \"\",\n                  children: \"Seleccionar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1192,\n                  columnNumber: 29\n                }, this), list.columnas_categoricas_onehot_json[name_column].map(name_column2 => {\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: name_column2,\n                    name: {\n                      name_column2\n                    },\n                    children: name_column2.replace(name_column + '_', '')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1196,\n                    columnNumber: 33\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1191,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1189,\n              columnNumber: 23\n            }, this)))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"consultas_red_neuronal_submit\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn_submit_blue_xl\",\n              type: \"submit\",\n              children: [\"Predecir\", /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"bx bxs-brain\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1211,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1207,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 11\n      }, this), this.state.post_loading_training === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor_spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1220,\n        columnNumber: 11\n      }, this), this.state.post_loading_training === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result_consult_red_neuronal_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"title_consult_red_neuronal center\",\n          children: [\"Predicci\\xF3n\", /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"bx bxl-redux\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1228,\n            columnNumber: 73\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1228,\n          columnNumber: 13\n        }, this), this.state.red_neuronal_type === 'number' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result_consult_red_neuronal_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: parseFloat(this.state.result_predict).toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1232,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.target_predecir_after_train\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1233,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1231,\n          columnNumber: 17\n        }, this), this.state.red_neuronal_type === 'string' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result_consult_red_neuronal_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [this.state.porcentaje_predict, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1239,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: this.state.result_predict\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1240,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.target_predecir_after_train\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1241,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1238,\n          columnNumber: 17\n        }, this), this.state.red_neuronal_type === 'binary' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result_consult_red_neuronal_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [this.state.porcentaje_predict, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1247,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: this.state.result_predict\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1248,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.target_predecir_after_train\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1249,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1246,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 11\n      }, this), this.state.loagind_training === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"run_red_neuronal_grid\",\n        style: {\n          'padding-top': ''\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"run_red_neuronal_item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item_btn_submit\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: process.env.PUBLIC_URL + '/files/modelo_red_neuronal.zip',\n              download: \"red_neuronal_model\",\n              className: \"btn_download_model\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"bx bxs-download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 19\n              }, this), \"Descargar Modelo Entrenado\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1261,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1259,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1258,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1257,\n        columnNumber: 11\n      }, this), this.state.loagind_training === 2 && this.state.red_neuronal_type === 'string' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal_consult_red_neuronal_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal_consult_red_neuronal_header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circulored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1276,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circuloyellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1277,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circulocalipso\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1278,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"terminal_consult_red_neuronal_title\",\n            children: \"Utilice el modelo entrenado para hacer predicciones en python\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1279,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1275,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal_consult_red_neuronal_row_grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1282,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"import\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1283,\n              columnNumber: 22\n            }, this), \" tensorflow \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"as\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1283,\n              columnNumber: 71\n            }, this), \" tf\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1283,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1285,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Etiquetas representadas en nombres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1286,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1288,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"class_names \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1289,\n              columnNumber: 34\n            }, this), \" [\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1289,\n              columnNumber: 68\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: this.state.class_names.join(\"', '\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1291,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1293,\n              columnNumber: 21\n            }, this), \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1289,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1296,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Cargar el modelo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1297,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1299,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"model \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 28\n            }, this), \" tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"keras\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 64\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"models\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 106\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"load_model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 149\n            }, this), \"(\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'C:/Users/56975/Downloads/modelo_red_neuronal'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1300,\n              columnNumber: 196\n            }, this), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1300,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1302,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Datos necesarios para la predicci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1305,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"sample \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1306,\n              columnNumber: 29\n            }, this), \" { \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1306,\n            columnNumber: 19\n          }, this), this.state.datos_entrenamiento.map(list => Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"index\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1311,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2003 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"texto\",\n                children: [\"'\", name_column, \"'\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1312,\n                columnNumber: 39\n              }, this), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"string\",\n                children: \"'String'\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1312,\n                columnNumber: 87\n              }, this), \",\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1312,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1310,\n            columnNumber: 27\n          }, this))), this.state.datos_entrenamiento.map(list => Object.keys(list.columns_numeric).map((number_column, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"index\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1321,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2003 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"texto\",\n                children: [\"'\", list.columns_numeric[number_column], \"'\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1322,\n                columnNumber: 45\n              }, this), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"number\",\n                children: \"Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1322,\n                columnNumber: 117\n              }, this), \",\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1322,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1320,\n            columnNumber: 33\n          }, this))), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1328,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1329,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1331,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"input_dict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1332,\n              columnNumber: 33\n            }, this), \" {name: tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"convert_to_tensor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1332,\n              columnNumber: 81\n            }, this), \"([value]) \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"for\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1332,\n              columnNumber: 144\n            }, this), \" name, value \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1332,\n              columnNumber: 189\n            }, this), \" sample.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1332,\n              columnNumber: 228\n            }, this), \"()}\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1332,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1334,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Llamar al m\\xE9todo y predecir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1335,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"11\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1337,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"predictions \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1338,\n              columnNumber: 34\n            }, this), \" model.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"predict\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1338,\n              columnNumber: 73\n            }, this), \"(input_dict)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1338,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1340,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"for\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1341,\n              columnNumber: 22\n            }, this), \" i, logits \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1341,\n              columnNumber: 65\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"enumerate\",\n              children: \"enumerate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1341,\n              columnNumber: 97\n            }, this), \"(predictions):\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1341,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1342,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u2003 class_idx \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1343,\n              columnNumber: 41\n            }, this), \" tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"argmax\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1343,\n              columnNumber: 77\n            }, this), \"(logits).\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"numpy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1343,\n              columnNumber: 128\n            }, this), \"()\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1343,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1344,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u2003 p \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 33\n            }, this), \" tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"nn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 69\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"softmax\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 108\n            }, this), \"(logits)[class_idx].\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"numpy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 171\n            }, this), \"() \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 215\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 246\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1345,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1346,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u2003 result_predict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1347,\n              columnNumber: 46\n            }, this), \" class_names[class_idx]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1347,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1348,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u2003 percentage_predict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1349,\n              columnNumber: 50\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"type\",\n              children: \"int\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1349,\n              columnNumber: 83\n            }, this), \"(p)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1349,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1281,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1274,\n        columnNumber: 13\n      }, this), this.state.loagind_training === 2 && this.state.red_neuronal_type === 'binary' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal_consult_red_neuronal_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal_consult_red_neuronal_header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circulored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1358,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circuloyellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1359,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circulocalipso\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"terminal_consult_red_neuronal_title\",\n            children: \"Utilice el modelo entrenado para hacer predicciones en python\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1361,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1357,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal_consult_red_neuronal_row_grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1364,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"import\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1365,\n              columnNumber: 22\n            }, this), \" tensorflow \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"as\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1365,\n              columnNumber: 71\n            }, this), \" tf\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1365,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1367,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Etiquetas representadas en nombres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1368,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1370,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"class_names \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1371,\n              columnNumber: 34\n            }, this), \" [\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1371,\n              columnNumber: 68\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: this.state.class_names.join(\"', '\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1373,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1375,\n              columnNumber: 21\n            }, this), \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1371,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1378,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Cargar el modelo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1379,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1381,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"model \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1382,\n              columnNumber: 28\n            }, this), \" tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"keras\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1382,\n              columnNumber: 64\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"models\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1382,\n              columnNumber: 106\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"load_model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1382,\n              columnNumber: 149\n            }, this), \"(\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'C:/Users/56975/Downloads/modelo_red_neuronal'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1382,\n              columnNumber: 196\n            }, this), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1382,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1384,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Datos necesarios para la predicci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1385,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1387,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"sample \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1388,\n              columnNumber: 29\n            }, this), \" { \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1388,\n            columnNumber: 19\n          }, this), this.state.datos_entrenamiento.map(list => Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"index\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1393,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2003 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"texto\",\n                children: [\"'\", name_column, \"'\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1394,\n                columnNumber: 39\n              }, this), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"string\",\n                children: \"'String'\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1394,\n                columnNumber: 87\n              }, this), \",\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1394,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1392,\n            columnNumber: 27\n          }, this))), this.state.datos_entrenamiento.map(list => Object.keys(list.columns_numeric).map((number_column, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"index\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1403,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2003 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"texto\",\n                children: [\"'\", list.columns_numeric[number_column], \"'\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1404,\n                columnNumber: 45\n              }, this), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"number\",\n                children: \"Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1404,\n                columnNumber: 117\n              }, this), \",\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1404,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1402,\n            columnNumber: 33\n          }, this))), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1410,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1411,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1413,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"input_dict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1414,\n              columnNumber: 33\n            }, this), \" {name: tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"convert_to_tensor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1414,\n              columnNumber: 81\n            }, this), \"([value]) \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"for\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1414,\n              columnNumber: 144\n            }, this), \" name, value \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1414,\n              columnNumber: 189\n            }, this), \" sample.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1414,\n              columnNumber: 228\n            }, this), \"()}\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1414,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1416,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Llamar al m\\xE9todo y predecir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1417,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"11\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"predictions \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1420,\n              columnNumber: 34\n            }, this), \" model.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"predict\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1420,\n              columnNumber: 73\n            }, this), \"(input_dict)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1420,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"prob \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1423,\n              columnNumber: 27\n            }, this), \" tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"nn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1423,\n              columnNumber: 63\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"sigmoid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1423,\n              columnNumber: 102\n            }, this), \"(predictions[\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1423,\n              columnNumber: 158\n            }, this), \"])\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1423,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1425,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"number \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1426,\n              columnNumber: 29\n            }, this), \" prob.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"numpy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1426,\n              columnNumber: 67\n            }, this), \"().\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1426,\n              columnNumber: 111\n            }, this), \"().\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"astype\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1426,\n              columnNumber: 155\n            }, this), \"(int)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1426,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1428,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"result_predict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1429,\n              columnNumber: 37\n            }, this), \" class_names[number[\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1429,\n              columnNumber: 89\n            }, this), \"]]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1429,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1431,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"percentage_predict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 41\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"type\",\n              children: \"int\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 74\n            }, this), \"(prob.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"numpy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 113\n            }, this), \"()[\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 157\n            }, this), \"] * \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 194\n            }, this), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1432,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1363,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 13\n      }, this), this.state.loagind_training === 2 && this.state.red_neuronal_type === 'number' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal_consult_red_neuronal_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal_consult_red_neuronal_header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circulored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1441,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circuloyellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1442,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circulocalipso\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1443,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"terminal_consult_red_neuronal_title\",\n            children: \"Utilice el modelo entrenado para hacer predicciones en python\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1444,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal_consult_red_neuronal_row_grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1447,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"import\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1448,\n              columnNumber: 22\n            }, this), \" tensorflow \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"as\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1448,\n              columnNumber: 71\n            }, this), \" tf\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1448,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1450,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Cargar el modelo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1451,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1453,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"model \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 28\n            }, this), \" tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"keras\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 64\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"models\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 106\n            }, this), \".\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"load_model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 149\n            }, this), \"(\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"texto\",\n              children: \"'C:/Users/56975/Downloads/modelo_red_neuronal'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 196\n            }, this), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1454,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1456,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Datos necesarios para la predicci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1457,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1459,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"sample \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1460,\n              columnNumber: 29\n            }, this), \" { \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1460,\n            columnNumber: 19\n          }, this), this.state.datos_entrenamiento.map(list => Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"index\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1465,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2003 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"texto\",\n                children: [\"'\", name_column, \"'\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1466,\n                columnNumber: 39\n              }, this), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"string\",\n                children: \"'String'\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1466,\n                columnNumber: 87\n              }, this), \",\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1466,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1464,\n            columnNumber: 27\n          }, this))), this.state.datos_entrenamiento.map(list => Object.keys(list.columns_numeric).map((number_column, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"index\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1475,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2003 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"texto\",\n                children: [\"'\", list.columns_numeric[number_column], \"'\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1476,\n                columnNumber: 45\n              }, this), \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"number\",\n                children: \"Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1476,\n                columnNumber: 117\n              }, this), \",\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1476,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1474,\n            columnNumber: 33\n          }, this))), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1482,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1483,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1485,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"input_dict \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1486,\n              columnNumber: 33\n            }, this), \" {name: tf.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"convert_to_tensor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1486,\n              columnNumber: 81\n            }, this), \"([value]) \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"for\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1486,\n              columnNumber: 144\n            }, this), \" name, value \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"for\",\n              children: \"in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1486,\n              columnNumber: 189\n            }, this), \" sample.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1486,\n              columnNumber: 228\n            }, this), \"()}\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1486,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1488,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comentario\",\n            children: \"# Llamar al m\\xE9todo y predecir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1489,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1491,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"predictions \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"igual\",\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1492,\n              columnNumber: 34\n            }, this), \" model.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tensorflow\",\n              children: \"predict\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1492,\n              columnNumber: 73\n            }, this), \"(input_dict)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1492,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"index\",\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1494,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"result_predict = predictions[\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1495,\n              columnNumber: 51\n            }, this), \"][\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"number\",\n              children: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1495,\n              columnNumber: 86\n            }, this), \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1495,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1446,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1439,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"task-container\",\n        style: {\n          'display': 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"form-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            id: \"form\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  flex: 6\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: this.handleChange,\n                  className: \"form-control\",\n                  id: \"title\",\n                  value: this.state.activeItem.title,\n                  type: \"text\",\n                  name: \"title\",\n                  placeholder: \"Add task..\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1508,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1507,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  flex: 1\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"btn btn-warning\",\n                  id: \"submit\",\n                  type: \"submit\",\n                  name: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1512,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1511,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1506,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1505,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"list-wrapper\",\n          children: tasks.map(function (tasks, index) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-wrapper flex-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => self.strikeUnstrike(tasks),\n                style: {\n                  flex: 7\n                },\n                children: tasks.completed == false ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: tasks.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1525,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"strike\", {\n                  children: tasks.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1527,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1522,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  flex: 1\n                },\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => self.startEdit(tasks),\n                  className: \"btn btn-sm btn-outline-info\",\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1532,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1531,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  flex: 1\n                },\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => self.deleteItem(tasks),\n                  className: \"btn btn-sm btn-outline-info\",\n                  children: \"-\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1536,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1535,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1521,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/56975/Desktop/ian_analytics/frontend/src/App.js"],"names":["React","useState","ReactPaginate","ReactFlow","MiniMap","addEdge","removeElements","Controls","Background","App","Component","constructor","props","state","todoList","red_neuronal_list","dir_excel","datos_excel","columns_excel","columns_excel_sin_datetime","activeItem","id","title","completed","editing","count","numero_paginas","filtered","busquedadTableExcel","pageNumber","columna_seleccionada","datos_entrenamiento","count_predict_original","nro_pag_total_predict_original","nro_pag_actual_predict_original","hidden_cap1","hidden_cap2","hidden_cap3","hidden_cap4","hidden_cap5","hidden_cap6","len_train_dataset","len_val_dataset","len_test_dataset","red_neuronal_type","class_names","target_predecir_after_train","consult_red_neuronal","result_predict","porcentaje_predict","pre_loading_train","loagind_training","post_loading_training","elements_public","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstrike","run_red_neuronal","handleChange_neural","handleSubmit_neural","buscadorTableExcel","handlePageClick","selectColumnTable","clickPageTablePredictOriginals","modeloPredeterminadoRedNeuronal","consult_red_handleChange","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","componentWillMount","e","setState","preventDefault","getElementsByClassName","value","csrftoken","url","fetch","method","headers","body","JSON","stringify","target_predecir","datos","then","response","json","data","Math","ceil","df_originals_predictions_json","tipo_red_neuronal","console","log","target","files","formData","FormData","append","Accept","datos_json","dataframe_sin_datetime","catch","error","task","btn_input_file_active","querySelector","click","addEventListener","valueStore","textContent","filteredDataExcel","slice","filter","item","Object","keys","some","key","toString","toLowerCase","includes","colorselectColumnTable","selected","td","createElement","classList","remove","querySelectorAll","forEach","element","className","filteredDataOriginalsPredict","onLoad","reactFlowInstance","fitView","elements","push","sourcePosition","type","label","position","x","y","elements_input_layer","map","splice","indexOf","targetPosition","neurona","source","animated","style","stroke","cant_total_neuronas","neu","data_consult_red_neuronal","render","tasks","columnas_excel","columnas_excel_sin_datetime","self","list_neural","process","env","PUBLIC_URL","width","height","index","__html","grafico1","grafico2","datos_hist_tail","list_neural_statics","parseFloat","toFixed","loss","mae","mse","data_train","grafico3","list","columns_numeric","number_column","replace","columnas_categoricas_onehot_json","name_column","name_column2","join","flex"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState} from 'react';\nimport ReactPaginate from 'react-paginate';\nimport ReactFlow, { MiniMap, addEdge, removeElements, Controls, Background } from 'react-flow-renderer';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todoList:[],\n      red_neuronal_list:[],\n      dir_excel:null,\n      datos_excel:[],\n      columns_excel:[],\n      columns_excel_sin_datetime:[],\n      activeItem:{\n        id:null,\n        title:'',\n        completed:false,\n      },\n      editing:false,\n      count:0,  //Contador utilizado para reconocer la posición de visualización de datos\n      numero_paginas:0, //Número de paginas según el total de datos y cantidad de datos por páginas\n      filtered:[], //Datos filtrados separados por la cant de datos a visualizar\n      busquedadTableExcel:'',\n      pageNumber:0, //deja la page 1 activada\n      columna_seleccionada: '', // Columna selecciona por un form select permitiendo visualizar la columna target\n\n      datos_entrenamiento: [],\n      count_predict_original:0,  //Contador utilizado para reconocer la posición de visualización de datos\n      nro_pag_total_predict_original:0, //Número de paginas según el total de datos y cantidad de datos por páginas\n      nro_pag_actual_predict_original:0, //deja la page 1 activada\n\n      /* Estructura de la red neuronal */\n      hidden_cap1: 0,\n      hidden_cap2: 0,\n      hidden_cap3: 0,\n      hidden_cap4: 0,\n      hidden_cap5: 0,\n      hidden_cap6: 0,\n      len_train_dataset: '',\n      len_val_dataset: '',\n      len_test_dataset: '',\n      red_neuronal_type: '',\n      class_names: [], // ej: 1: iris setosa, 2:iris versicolor\n      target_predecir_after_train: '',  //Se guarda el target predicho luego del entrenamiento neuronal\n      consult_red_neuronal: '',  //Se guardan para enviar los datos para predecir\n      result_predict: '',\n      porcentaje_predict: 0,\n      pre_loading_train: 0,\n      loagind_training: 0,\n      post_loading_training: 0,\n      elements_public: [],\n    }\n\n    this.fetchTasks = this.fetchTasks.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getCookie = this.getCookie.bind(this)\n\n    this.startEdit = this.startEdit.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.strikeUnstrike = this.strikeUnstrike.bind(this)\n\n    this.run_red_neuronal = this.run_red_neuronal.bind(this)\n    this.handleChange_neural = this.handleChange_neural.bind(this)\n    this.handleSubmit_neural = this.handleSubmit_neural.bind(this)\n\n    this.buscadorTableExcel = this.buscadorTableExcel.bind(this)\n    this.handlePageClick = this.handlePageClick.bind(this)\n\n    this.selectColumnTable = this.selectColumnTable.bind(this)\n    this.clickPageTablePredictOriginals = this.clickPageTablePredictOriginals.bind(this)\n    this.modeloPredeterminadoRedNeuronal = this.modeloPredeterminadoRedNeuronal.bind(this)\n\n    this.consult_red_handleChange = this.consult_red_handleChange.bind(this)\n    this.consult_red_neuronal = this.consult_red_neuronal.bind(this)\n  };\n  \n  /* csrftoken Ruta = 'https://docs.djangoproject.com/en/3.2/ref/csrf/' */\n  getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n  }\n\n  //Activa funciones\n  componentWillMount(){\n    this.fetchTasks()\n  }\n\n  run_red_neuronal(e){\n    this.setState({\n      loagind_training: 1,\n      post_loading_training: 0,\n    })\n    e.preventDefault()\n    /* Limpia los input y selects del form de predicciones */\n    if (document.getElementsByClassName(\"input\").length > 0){\n      for(var i=0; i<document.getElementsByClassName(\"input\").length; i++){\n        document.getElementsByClassName(\"input\")[i].value = \"\";\n      }\n    }\n    var csrftoken = this.getCookie('csrftoken')\n    var url = 'http://127.0.0.1:8000/run_red_neuronal/'\n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify({\n        target_predecir: this.state.columna_seleccionada,\n        datos: this.state.datos_excel,\n      })\n    }).then(response => response.json()) \n      .then(data => \n        this.setState({\n          loagind_training: 2,\n          result_predict: '', /* Limpia el resultado de la predicción */\n          porcentaje_predict: 0,\n          datos_entrenamiento:data,\n          nro_pag_total_predict_original: Math.ceil(data[0].df_originals_predictions_json.length/5),\n          target_predecir_after_train: data[0].target_predecir_after_train,\n          len_train_dataset: data[0].len_train_dataset,\n          len_val_dataset: data[0].len_val_dataset,\n          len_test_dataset: data[0].len_test_dataset,\n          red_neuronal_type: data[0].tipo_red_neuronal,\n          class_names: data[0].class_names\n        }, () => console.log(\"\"), console.log(\"data[0].class_names\"), console.log())\n      )\n  }\n\n  // Listando Tasks\n  fetchTasks(){\n    fetch('http://127.0.0.1:8000/task-list/')\n    .then(response => response.json())\n    .then(data =>\n      this.setState({\n        todoList:data\n      }, () => {\n        console.log(\"\")\n      })\n    )\n  }\n\n  handleChange_neural(e){\n    /* if (document.getElementsByClassName(\"react-flow\").length > 0){\n      document.querySelector('.react-flow__renderer svg').remove('svg')\n      console.log(\"\")\n      setTimeout(() => {  console.log(\"World!\"); }, 5000);\n    } */\n\n    this.setState({\n      dir_excel: e.target.files[0]\n    })\n  }\n\n  //Agregando\n  handleChange(e){\n    var name = e.target.name\n    var value = e.target.value\n    console.log('Name:', name)\n    console.log('Value:', value)\n\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title:value\n      }\n    })\n  }\n\n  //Botón de enviar\n  handleSubmit_neural(e){\n    this.setState({\n      pre_loading_train: 1,\n      elements_public: [],\n      columna_seleccionada: '',\n      hidden_cap1: 0,\n      loagind_training: 0,\n      post_loading_training: 0,\n    })\n\n    /* Limpia el input del buscador de la tabla con los datos */\n    if (document.getElementsByClassName(\"search_table_excel\").length > 0){\n      document.getElementsByClassName(\"search_table_excel\")[0].value = \"\";\n    }\n    /* Limpia el select del target */\n    if (document.getElementsByClassName(\"form_select_target\").length > 0){\n      document.getElementsByClassName(\"form_select_target\")[0].value = \"\";\n    }\n\n    e.preventDefault()\n    let formData = new FormData();\n    formData.append('dir_excel',this.state.dir_excel)\n\n    var csrftoken = this.getCookie('csrftoken')\n    var url = 'http://127.0.0.1:8000/load_data/'\n    fetch(url, {\n      method:'POST',\n      headers:{\n        Accept: 'application/json, text/plain, */*',\n      },\n      body:formData,\n    }).then(response => response.json())\n      .then(data =>\n        this.setState({\n          pre_loading_train: 2,\n          count: 0, /* Al cargar un nuevo dataset vuelve a la pag. 1 */\n          pageNumber: 0, /* Al cargar un nuevo dataset vuelve a la pag. 1 */\n          busquedadTableExcel:'', /* Limpia el buscador al cargar un nuevo dataset */\n          datos_excel:data[0].datos_json,\n          columns_excel:data[0].datos_json[0],\n          columns_excel_sin_datetime:data[0].dataframe_sin_datetime[0],\n          /* numero_paginas: Math.ceil(data.length/5) */\n          numero_paginas: Math.ceil(data[0].datos_json.length/5)\n        }, () => {this.modeloPredeterminadoRedNeuronal()}\n        )\n      )\n  }\n\n  //Botón de enviar\n  handleSubmit(e){\n    e.preventDefault()\n    \n    /* csrftoken */\n    var csrftoken = this.getCookie('csrftoken')\n\n    var url = 'http://127.0.0.1:8000/task-create/'\n\n    if(this.state.editing == true){  /* EDITANDO */\n      url = `http://127.0.0.1:8000/task-update/${this.state.activeItem.id}/`\n      this.setState({\n        editing:false\n      })\n    }\n    \n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        /* csrftoken */\n        'X-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify(this.state.activeItem)\n    }).then((response) => {\n        this.fetchTasks()\n        this.setState({\n          activeItem:{\n          id:null,\n          title:'',\n          completed:false,\n        }\n        })\n    }).catch(function(error){\n      console.log('ERROR:', error)\n    })\n  }\n\n  /* EDITAR */\n  startEdit(task){\n    this.setState({\n      activeItem:task,\n      editing:true,\n    })\n  }\n\n  /* ELIMINAR */\n  deleteItem(task){\n    var csrftoken = this.getCookie('csrftoken')\n\n    fetch(`http://127.0.0.1:8000/task-delete/${task.id}/`, {\n      method:'DELETE',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n    }).then((response) => {\n      this.fetchTasks()\n    })\n  }\n\n  /* Subrayado */\n  strikeUnstrike(task){\n    task.completed = !task.completed\n    var csrftoken = this.getCookie('csrftoken')\n    var url = `http://127.0.0.1:8000/task-update/${task.id}/`\n      fetch(url, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          'X-CSRFToken':csrftoken,\n        },\n        body:JSON.stringify({'completed': task.completed, 'title': task.title})\n      }).then(() =>{\n        this.fetchTasks()\n      })\n    console.log(\"\")\n  }\n\n  /* Función de Input Type File */\n  btn_input_file_active() {\n    document.querySelector(\"#ruta_excel\").click()\n    document.querySelector(\"#ruta_excel\").addEventListener(\"change\", function(){\n      if(this.value){\n        let valueStore = this.value.split('\\\\');\n        document.querySelector(\".file_name\").textContent = valueStore[valueStore.length-1]\n      }\n      else {\n        document.querySelector(\".file_name\").textContent = \"Ningún archivo seleccionado\"\n      }\n    })\n  }\n\n  /* Filtro para la tabla */\n  /* filteredDataExcel(prevProps, prevState) { */\n  filteredDataExcel() {\n    if(this.state.busquedadTableExcel.length === 0){\n      return [this.state.datos_excel.slice(this.state.count, this.state.count + 5), Math.ceil(this.state.datos_excel.length/5)]\n    }\n\n    const filtered = this.state.datos_excel.filter(item => {\n      return Object.keys(item).some(key => \n        item[key].toString().toLowerCase().includes(this.state.busquedadTableExcel.toLowerCase())\n      );\n    });\n\n    //const filtered = this.state.datos_excel.filter( poke => poke.Equipo.toLowerCase().includes(this.state.busquedadTableExcel.toLowerCase()))\n    return [filtered.slice(this.state.count, this.state.count + 5), Math.ceil(filtered.length/5)]\n  }\n\n  buscadorTableExcel(e) {\n    this.setState({\n      count: 0,\n      pageNumber: 0,\n      busquedadTableExcel: e.target.value,\n    }, () => {\n      this.setState({numero_paginas: this.filteredDataExcel()[1]})\n      this.colorselectColumnTable()\n    })\n  }\n\n  handlePageClick(e) {\n    this.setState({\n      count: e.selected * 5,\n      pageNumber: e.selected\n    }, () => {\n      this.colorselectColumnTable()\n    })\n  }\n\n  selectColumnTable(e) {\n\n    if(e.target.value == ''){\n      this.setState({\n        columna_seleccionada: '',\n        elements_public: [] }, () => {\n        this.colorselectColumnTable();\n        this.modeloPredeterminadoRedNeuronal();\n      });\n    }\n    else {\n      this.setState({\n        columna_seleccionada: e.target.value,\n        elements_public: [] }, () => {\n        this.colorselectColumnTable();\n      });\n\n\n      e.preventDefault()\n      var csrftoken = this.getCookie('csrftoken')\n      var url = 'http://127.0.0.1:8000/detect_type_neuronal/'\n      fetch(url, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          'X-CSRFToken':csrftoken,\n        },\n        body:JSON.stringify({\n          target_predecir: e.target.value,\n          datos: this.state.datos_excel,\n        })\n      }).then(response => response.json()) \n        .then(data => \n          this.setState({\n            red_neuronal_type: data[0].tipo_red_neuronal,\n            hidden_cap1: data[0].hidden_cap1\n          }, () => { this.modeloPredeterminadoRedNeuronal(); })\n      )\n    }\n  }\n\n  colorselectColumnTable() {\n    /* Elimina la columna seleccionada anteriormente (Remueve la clase activeColorTable) */\n    var td = document.createElement('td');\n    td.classList.remove(\"activeColorTable\")\n\n    document.querySelectorAll(\".activeColorTable\").forEach(function(element) {\n      element.classList.remove(\"activeColorTable\");\n    });\n\n    /* Selecciona la columna indica por form select */\n    var element = document.getElementsByClassName(this.state.columna_seleccionada)\n    for(var i = 0; i < element.length; i++)\n    {\n      element[i].className += \" activeColorTable\";\n    }\n  }\n\n  filteredDataOriginalsPredict() {\n    return this.state.datos_entrenamiento[0].df_originals_predictions_json.slice(this.state.count_predict_original, this.state.count_predict_original + 5)\n  }\n\n  clickPageTablePredictOriginals(e) {\n    this.setState({\n      count_predict_original: e.selected * 5,\n      nro_pag_actual_predict_original: e.selected\n    })\n  }\n\n  /* Librería reactflow*/\n  modeloPredeterminadoRedNeuronal(){\n    const onLoad = (reactFlowInstance) => reactFlowInstance.fitView();\n\n    let elements = []\n    elements.push({ id: 'input_layer', sourcePosition: 'right', type: 'input', data: { label: 'Input Layer' }, position: { x: 50, y: 0 } })\n    elements.push({ id: 'hidden_layer', sourcePosition: 'right', type: 'input', data: { label: 'Hidden Layers' }, position: { x: 300, y: 0 } })\n    elements.push({ id: 'output_layer', sourcePosition: 'right', type: 'input', data: { label: 'Output Layer' }, position: { x: 550, y: 0 } })\n    elements.push({ id: 'total_neurons_output_layer', sourcePosition: 'right', type: 'input', data: { label: '1 neurona' }, position: { x: 550, y: 42 } })\n\n    /* Se crea el array que contiene las neuronas de la input layer  */\n    const elements_input_layer = []\n    Object.keys(this.state.columns_excel_sin_datetime).map((key, i) => {\n      return ([\n        elements_input_layer.push(key)\n      ])\n    })\n\n    /* Elimina la columna target del array de la input layer*/\n    if(this.state.columna_seleccionada != ''){\n      elements_input_layer.splice(elements_input_layer.indexOf(this.state.columna_seleccionada), 1);\n    }\n\n    /* Agrega como título la cantidad total de neuronas en la capa Input Layer */\n    elements.push({ id: 'total_neurons_input_layer', sourcePosition: 'right', type: 'input', data: { label: elements_input_layer.length + ' neuronas' }, position: { x: 50, y: 42 } },)\n\n    /* Agrega las neuronas en la Input Layer */\n    var position = [80] /* Constante para ubicar las neuronas en la capa, como coordenadas gps */\n    elements_input_layer.map((key, i) => {\n      return ([\n        elements.push({ id: key, sourcePosition: 'right', type: 'input', data: { label: key }, position: { x: 50, y: position[0] } },),\n        position.push(position[0] + 80), /* position = [80, 160] */\n        position.splice(0, 1), /* position = [160] # elimina la primera posición*/\n      ])\n    })\n\n\n    /* Agrega el título de la cantidad total de neuronas de la primera hidden layers*/\n    elements.push({ id: 'total_neurons_hidden_layer', sourcePosition: 'right', type: 'input', data: { label: this.state.hidden_cap1 + ' neuronas' }, position: { x: 300, y: 42 } },)\n\n    /* Creación de las neuronas de la hidden layers 1 */\n    /* Unión entre las neuronas de la hidden layers 1 e Input Layer*/\n    if(this.state.hidden_cap1 !== 0){\n      if(this.state.hidden_cap1 <= 8){\n        for (var i = this.state.hidden_cap1; i > 0; i--){\n          /* Crea las neuronas */\n          elements.push({ id: 'capaOculta1_neurona' + i, targetPosition: 'left', sourcePosition: 'right', data: { label: <div>Neurona {i}</div> }, position: { x: 300, y: 80 * i } })\n          /* Agrega las conexiones entre la input layer y la primera hidden layer */\n          elements_input_layer.map((neurona) => {\n            elements.push({ id: 'e'+ i, source: neurona, target: 'capaOculta1_neurona' + i, animated: true , style: { stroke: '#5da7d6' } })\n          })\n        }\n      }\n      else {\n        let cant_total_neuronas = this.state.hidden_cap1\n        for (var i = this.state.hidden_cap1; i > 0; i--){\n          if(i == cant_total_neuronas){\n            elements.push({ id: 'capaOculta1_neurona' + i, targetPosition: 'left', sourcePosition: 'right', data: { label: <div>Neurona {i}</div> }, position: { x: 300, y: 640 } })\n            elements.push({ id: 'punto_seguido1', className: 'punto_seguido',  data: { label: <div></div> }, position: { x: 300, y: 550 } })\n            elements.push({ id: 'punto_seguido2', className: 'punto_seguido', data: { label: <div></div> }, position: { x: 300, y: 570 } })\n            elements.push({ id: 'punto_seguido3', className: 'punto_seguido', data: { label: <div></div> }, position: { x: 300, y: 590 } })\n            elements_input_layer.map((neurona) => {\n              elements.push({ id: 'e3' + i, source: neurona, target: 'capaOculta1_neurona' + i, animated: true , style: { stroke: '#5da7d6' } })\n            })\n          }\n          if(i <=6){\n            /* Crea las neuronas */\n            elements.push({ id: 'capaOculta1_neurona' + i, targetPosition: 'left', sourcePosition: 'right', data: { label: <div>Neurona {i}</div> }, position: { x: 300, y: 80 * i } })\n            /* Agrega las conexiones entre la input layer y la primera hidden layer */\n            elements_input_layer.map((neurona) => {\n              elements.push({ id: 'e3' + i, source: neurona, target: 'capaOculta1_neurona' + i, animated: true , style: { stroke: '#5da7d6' } })\n            })\n          }\n        }\n      }\n    }\n    \n    /* Agrega la neurona de la capa Output Layer */\n    if(this.state.columna_seleccionada != ''){\n      elements.push({ id: this.state.columna_seleccionada, targetPosition: 'left', type: 'output', data: { label: <div>{this.state.columna_seleccionada}</div> }, position: { x: 550, y: position[0] / 2 } })\n    }\n\n    /* Unión (conexión) entre las neuronas de la hidden layer y Output layer */\n    for (var i = 6; i > 0; i--){\n      if(this.state['hidden_cap'+i] !== 0){\n      /* if('this.state.hidden_cap'+i !== 0){ */\n        for (var neu = 1; neu <= this.state['hidden_cap'+i]; neu++){\n          /* console.log('capaOculta' + i + '_neurona' + neu) */\n          if (neu < 7 || neu == this.state['hidden_cap'+i]) {\n            elements.push({ id: 'e4' + i + neu, source: 'capaOculta' + i + '_neurona' + neu, target: this.state.columna_seleccionada, animated: true , style: { stroke: '#5da7d6' } })\n          }\n        }\n      }\n    }\n\n    this.setState({\n      elements_public: elements\n    })\n\n    return elements\n  }\n\n  consult_red_handleChange(e) {\n    if(e.target.name == 'select'){\n      const value = e.target.value\n      const name = e.target.value\n\n      this.setState({\n        consult_red_neuronal: {\n          ...this.state.consult_red_neuronal,\n          [name]: value\n        }\n      })\n    }\n    else {\n      const value = e.target.value\n      const name = e.target.name\n\n      this.setState({\n        consult_red_neuronal: {\n          ...this.state.consult_red_neuronal,\n          [name]: value\n        }\n      })\n    }\n  }\n\n  /* Consultar la Red Neuronal */\n  consult_red_neuronal(e){\n    this.setState({\n      post_loading_training: 1\n    })\n    console.log(this.state.consult_red_neuronal)\n    e.preventDefault()\n    var csrftoken = this.getCookie('csrftoken')\n    var url = 'http://127.0.0.1:8000/consult_red_neuronal/'\n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n      body: JSON.stringify({\n        data_consult_red_neuronal:this.state.consult_red_neuronal,\n        red_neuronal_type: this.state.red_neuronal_type,\n        class_names: this.state.class_names,\n      })\n    }).then(response => response.json()) \n      .then(data => \n        this.setState({\n          post_loading_training: 2,\n          result_predict: data[0].result_predict,\n          porcentaje_predict: data[0].porcentaje_predict\n        }, () => console.log(data[0].result_predict), console.log(\"RESULTADO PREDICT: \"))\n      )\n  }\n\n\n  render(){\n    var tasks = this.state.todoList\n    var datos_excel = this.state.datos_excel\n    var columnas_excel = this.state.columns_excel\n    var columnas_excel_sin_datetime = this.state.columns_excel_sin_datetime\n    var self = this\n    return(\n      <div className=\"container\">\n        {/* Selección de dataset */}\n        <div className=\"background_one\" style={{ 'background-image': 'url(../files/bg_light_blue_right.png)'}}>\n          <h1 className=\"title_principal text-gradient-blue-purple\">Seleccione una&nbsp;<strong>fuente de datos</strong>&nbsp;para iniciar el proceso {/* <img  src={process.env.PUBLIC_URL + '/files/data-cleaning.svg'}></img> */}</h1>\n          <div className=\"button_load_excel_grid\">\n            <form onSubmit={this.handleSubmit_neural}>\n              <input onChange={this.handleChange_neural} type=\"file\" className=\"input_file_display\" id=\"ruta_excel\" name=\"ruta_excel\"></input>\n              <div className=\"button_load_excel_item\">\n                <div className=\"btn_input_file\" onClick={this.btn_input_file_active} style= {{ 'background-image': 'url(../files/cubes_red.svg)'}}>\n                  <p className=\"icon_input_file\">\n                    <i className='bx bx-upload'></i>\n                    <p className=\"file_name\">Ningún archivo seleccionado</p>\n                  </p>\n                  <p className=\"title_input_file\">Seleccionar Archivo</p>\n                  <p className=\"text_input_file\">Cargue archivos excel, archivos csv o archivos de texto.</p>\n                </div>\n                <div className=\"item_btn_submit\">\n                  <input className=\"btn_submit_file\" id=\"submit\" type=\"submit\" name=\"Add\" value=\"Cargar Datos\"/>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {/* LOADING... */}\n        { this.state.pre_loading_train === 1  &&\n            <div className='contenedor_spinner'>\n              <div className='spinner'></div>\n            </div>\n        }\n\n        {/* Table con visualización de datos */}\n        { this.state.pre_loading_train === 2  &&\n          <div className=\"table_excel_grid\">\n            <div className=\"table_excel_item\">\n              <div className=\"structure_table\">\n                <h3 className=\"title_table\">Visualización del conjunto de datos</h3>\n                <div className=\"btn_search_table_excel\"> \n                  <i className='bx bx-search-alt-2' ></i>\n                  <input onChange={this.buscadorTableExcel} type=\"text\" placeholder=\"Buscador\" className=\"search_table_excel\"></input>\n                </div>\n                <table id=\"customers\">\n                  <tr>\n                    {Object.keys(columnas_excel).map(key => (\n                        <th className={key}>{key}</th>\n                      ))}\n                  </tr>\n                  {\n                    this.filteredDataExcel()[0].map(function(list_neural) {\n                      return (\n                        <tr>\n                          {\n                            Object.keys(columnas_excel).map((key, i) => (\n                              <td className={key}>{list_neural[key]}</td>\n                              ))\n                            }\n                        </tr>\n                      )\n                    })\n                  }\n                </table>\n                <div className=\"footer_table_grid\">\n                  <div className=\"dataTables_info\">\n                    <p>{datos_excel.length} filas × {Object.keys(columnas_excel).length - 1} columns</p>\n                  </div>\n                  <div className=\"multipagination\">\n                    <div>\n                    <ReactPaginate\n                      previousLabel={<i className='bx bx-chevron-left'></i>}\n                      nextLabel={<i className='bx bx-chevron-right'></i>}\n                      breakLabel={\"...\"}\n                      breakClassName={\"break-me\"}\n                      pageCount={this.state.numero_paginas}\n                      marginPagesDisplayed={2}\n                      pageRangeDisplayed={5}\n                      forcePage={this.state.pageNumber}\n                      onPageChange={this.handlePageClick}\n                      containerClassName={\"pagination\"}\n                      subContainerClassName={\"pages pagination\"}\n                      activeClassName={\"active\"}>\n                    </ReactPaginate>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n\n        { this.state.pre_loading_train === 2  &&\n          <form onSubmit={this.run_red_neuronal}>\n            {/* Seleccionar target*/}\n            <div className=\"select_target_grid\" style= {{ 'padding-top': ''}}>\n              <div className=\"form_select_item\">\n                <img className=\"img_target\" src={process.env.PUBLIC_URL + '/files/target2.png'}></img>\n                <h4>Seleccionar Columna a <strong style={{ 'background-image': 'url(../files/decoration_title.svg)'}}>Predecir</strong></h4>\n                <div className=\"form_select_content\">\n                  <select onChange={this.selectColumnTable} className=\"form_select_target\" aria-label=\"Default select example\" required>\n                      <option selected value=\"\">Seleccionar</option>\n                      {Object.keys(columnas_excel_sin_datetime).filter(key => key !== '').map(key => (\n                        <option className={key}>{key}</option>\n                      ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {/* Ejecutar red neuronal con btn (RUN) */}\n                <div className=\"run_red_neuronal_grid\" style= {{ 'padding-top': ''}}>\n                  <div className=\"run_red_neuronal_item\">\n                    <button className=\"run_red_neuronal_btn_blue_submit\" id=\"submit\" type=\"submit\" name=\"Add\" value=\"\">\n                      Entrenar Red Neuronal <i class='bx bx-play-circle'></i>\n                    </button>\n                  </div>\n                </div>\n          </form>\n        }\n\n        {/* Estructura de la Red Neuronal */}\n        { this.state.pre_loading_train === 2  &&\n          <div className=\"design_neural_network\">\n            <h1>Configuración predeterminada del modelo <img  src={process.env.PUBLIC_URL + '/files/training_result2.png'}></img></h1>\n              <ReactFlow \n                onLoad={(reactFlowInstance) => reactFlowInstance.fitView()}\n                /* elements={this.modeloPredeterminadoRedNeuronal()} */\n                elements={this.state.elements_public}\n                defaultZoom={0.78}\n                defaultPosition={[200, 8]}\n                style={{width:'1007px', height:'60vh'}}\n                snapToGrid={true}\n                snapGrid={[5, 5]}\n                zoomOnScroll={false}\n                zoomOnPinch={false}\n              >\n                <Controls/>\n                <Background \n                  variant=\"lines\"\n                />\n                <addEdge/>\n              </ReactFlow>\n          </div>\n        }\n\n        {/* LOADING... */}\n        { this.state.loagind_training === 1  &&\n          <div className='contenedor_spinner'>\n            <div className='spinner'></div>\n          </div>\n        }\n\n        {/* Gráfico de barra de porcentajes sobre datos de entrenamiento y validación */}\n        { this.state.loagind_training === 2  &&\n          <div className=\"bar_divide_bar_wrapper\">\n            <div className=\"bar_divide_bar_header_img\">\n              <img  src={process.env.PUBLIC_URL + '/files/train_vali_test2.svg'}></img>\n              {/* <object  data={process.env.PUBLIC_URL + '/files/train_vali_test2.svg'}></object> */}\n            </div>\n            <div className=\"bar_divide_bar_header\">\n              <h2 className=\"center\">División del DataFrame en conjuntos de entrenamiento, validación y prueba</h2>\n  {/*             <div className=\"background_icon_bar_divide\">\n                <i class='bx bx-cut'></i>\n              </div> */}\n            </div>\n            <div className=\"bar_divide_bar_container\">\n                    <div className=\"training_set\">\n                      <span className=\"training_set_cantidad\">{this.state.len_train_dataset} ejemplos</span>\n                      <span className=\"training_set_porcentaje\">80%</span>\n                    </div>\n                    <div className=\"val_set\">\n                      <span className=\"val_set_cantidad\">{this.state.len_val_dataset}</span>\n                      <span className=\"val_set_porcentaje\">10%</span>\n                    </div>\n                    <div className=\"test_set\">\n                      <span className=\"test_set_cantidad\">{this.state.len_test_dataset}</span>\n                      <span className=\"test_set_porcentaje\">10%</span>\n                    </div>\n                    <span className=\"subconjuntos training_set_conj\">Training Set</span>\n                    <span className=\"subconjuntos val_set_conj\">Val Set</span>\n                    <span className=\"subconjuntos test_set_conj\">Test Set</span>\n            </div>\n          </div>\n        }\n\n        {/* Gráfico de conectividad */}\n        { this.state.loagind_training === 2  &&\n          this.state.datos_entrenamiento.map(function(list_neural, index){\n            return (\n              <React.Fragment>\n                <div className=\"graficos_connectivity_grid\">\n                  <div className=\"graf_connectivity_img\">\n                    <img  src={process.env.PUBLIC_URL + '/files/connectivity2.png'}></img>\n                    {/* <object  data={process.env.PUBLIC_URL + '/files/connectivity3.svg'}></object> */}\n                  </div>\n                  <div className=\"graficos_connectivity_header\">\n                    <h2 className=\"grafico_connectivity_title\">Arquitectura del modelo resultante (gráfico de conectividad)</h2>\n                  </div>\n                  <a href={process.env.PUBLIC_URL + '/files/Connectivity_graph.png'} target=\"_blank\">\n                    {/* <img src={require('./images/Connectivity_graph.png').default}></img> */}\n                    <img src={process.env.PUBLIC_URL + '/files/Connectivity_graph.png'} alt=\"Image1\"></img>\n\n                    {/* <img src=\"http://localhost:8000/frontend/public/files/Connectivity_graph.png\" alt=\"Image1\"></img> */}\n\n                    {/* <img src=\"http://localhost:8000/files/Connectivity_graph.png\" alt=\"Image1\" ></img> */}\n                    {/* <img src=\"%PUBLIC_URL%/Connectivity_graph.png\" alt=\"Image1\" ></img> */}\n                    {/* <img src=\"http://localhost:8000/Connectivity_graph.png\" alt=\"Image1\" ></img> */}\n                  </a>\n                </div>\n              </React.Fragment>\n            )\n          })\n        }\n\n        {/* Gráficos de entrenamiento (precisión y perdida)*/}\n        { this.state.loagind_training === 2  &&\n          this.state.datos_entrenamiento.map(function(list_neural, index){\n            if(self.state.red_neuronal_type != '')\n              return(\n                <div className=\"graficos_training_wrapper\">\n                    <div className=\"graficos_training_img\">\n                      <img  src={process.env.PUBLIC_URL + '/files/training_result3.png'}></img>\n                    </div>\n                    <div className=\"graficos_training_header\">\n                      {/* <div className=\"background_icon_graph_training\">\n                        <i class='bx bx-pulse'></i>\n                      </div> */}\n                      <h2 className=\"graficos_training_title\">Resultados del entrenamiento de la red neuronal en los conjuntos de entrenamiento y validación</h2>\n                    </div>\n                  <div className=\"graficos_abs_square_grid\">\n                    <div className=\"graph_precision\">\n                      <h2>Visualice la precisión del modelo a lo largo del tiempo</h2>\n                      <div className=\"img_graph_precision\" dangerouslySetInnerHTML={{__html: list_neural.grafico1}} />\n                    </div>\n                    <div className=\"graph_perdida\">\n                      <h2>Visualice la función de pérdida a lo largo del tiempo</h2>\n                      <div className=\"img_graph_perdida\" dangerouslySetInnerHTML={{__html: list_neural.grafico2}} />\n                    </div>\n\n                    {/* Tabla con estadisticas finales del entrenamiento */}\n                    <div className=\"table_excel_grid3\">\n                      <div className=\"table_statics_jupyter_item\">\n                        <div className=\"structure_table_statics_jupyter\">\n                          <h3 className=\"title_table_statics_jupyter\">Rendimiento general del modelo</h3>\n                          <table id=\"statics_jupyter\">\n                            <tr>\n                            {Object.keys(list_neural.datos_hist_tail[0]).map(key => (\n                                  <th className={key}>{key}</th>\n                            ))}\n                            </tr>\n                            {\n                              list_neural.datos_hist_tail.map(function(list_neural_statics) {\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(list_neural.datos_hist_tail[0]).map((key, i) => (\n                                        <td className={key}>{ list_neural_statics[key] % 1 != 0 ? (parseFloat(list_neural_statics[key]).toFixed(4)): list_neural_statics[key]}</td>\n                                        ))\n                                      }\n                                  </tr>\n                                )\n                              })\n                            }\n                          </table>\n                        </div>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n              )\n          })\n        }\n\n        {/* Resultados de loss, mse y mae*/}\n        { this.state.loagind_training === 2  &&\n          this.state.datos_entrenamiento.map(function(list_neural, index){\n            if(self.state.red_neuronal_type === 'number')\n              return(\n                <div className=\"statics_container\">\n                  <img className=\"img_target\" src={process.env.PUBLIC_URL + '/files/timer.svg'}></img>\n                  <h2 className=\"section_title\">Evaluación del modelo entrenado en el conjunto de datos de prueba <img  src={process.env.PUBLIC_URL + '/files/acurracy.svg'}></img></h2>\n                  <div className=\"statics_row\">\n                    <div className=\"statics_grid loss_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.loss).toFixed(2) }</div>\n                      <p className=\"statics_sub_title\">loss</p>\n                    </div>\n                    <div className=\"statics_grid accuracy_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.mae).toFixed(2) }</div>\n                      <p className=\"statics_sub_title\">mae</p>\n                    </div>\n                    <div className=\"statics_grid mse_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.mse).toFixed(2) }</div>\n                      <p className=\"statics_sub_title\">mse</p>\n                    </div>\n                  </div>\n                </div>\n              )\n            \n            if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n              return(\n                <div className=\"statics_container\">\n                  <img className=\"img_target\" src={process.env.PUBLIC_URL + '/files/timer.svg'}></img>\n                  <h2 className=\"section_title\">Evaluación del modelo entrenado en el conjunto de datos de prueba <img  src={process.env.PUBLIC_URL + '/files/acurracy.svg'}></img></h2>\n                  <div className=\"statics_row_Accuracy\">\n                    <div className=\"statics_grid loss_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.loss).toFixed(0) }</div>\n                      <p className=\"statics_sub_title\">loss</p>\n                    </div>\n                    <div className=\"statics_grid accuracy_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.mae).toFixed(0) }%</div>\n                      <p className=\"statics_sub_title\">Accuracy </p>\n                    </div>\n                  </div>\n                </div>\n              )\n          })\n        }\n\n        {/* Table con result originales vs predicciones - Matriz de confusión*/}\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'string'  &&\n            <div className=\"table_result_and_matris_wrapper\">\n              <div className=\"table_excel_grid2\">\n                {/* Tabla con predicciones y datos originales */}\n                <div className=\"table_excel_item2\">\n                  {this.state.datos_entrenamiento.map(function(data_train, index){\n                    return(\n                      <div className=\"structure_table\">\n                        <h3 className=\"title_table\">Predicciones en el conjunto de prueba</h3>\n                        <table id=\"customers\">\n                          <tr>\n                            {Object.keys(data_train.df_originals_predictions_json[0]).map(key => (\n                              <th className={key}>{key}</th>\n                            ))}\n                          </tr>\n\n                          {\n                            self.filteredDataOriginalsPredict().map(function(list_neural) {\n                              if(self.state.red_neuronal_type === 'number')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): parseFloat(list_neural[key]).toFixed(2)}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                              if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): list_neural[key]}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                            })\n                          }\n                        </table>\n                        <div className=\"footer_table_grid\">\n                          <div className=\"dataTables_info\">\n                            <p>{data_train.df_originals_predictions_json.length} filas</p>\n                          </div>\n                          <div className=\"multipagination\">\n                            <div>\n                            <ReactPaginate\n                              previousLabel={<i className='bx bx-chevron-left'></i>}\n                              nextLabel={<i className='bx bx-chevron-right'></i>}\n                              breakLabel={\"...\"}\n                              breakClassName={\"break-me\"}\n                              pageCount={self.state.nro_pag_total_predict_original}\n                              marginPagesDisplayed={2}\n                              pageRangeDisplayed={5}\n                              forcePage={self.state.nro_pag_actual_predict_original}\n                              onPageChange={self.clickPageTablePredictOriginals}\n                              containerClassName={\"pagination\"}\n                              subContainerClassName={\"pages pagination\"}\n                              activeClassName={\"active\"}>\n                            </ReactPaginate>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n\n                {/* Matriz de confusión */}\n                {this.state.datos_entrenamiento.map(function(list_neural, index){\n                  if(self.state.red_neuronal_type != '')\n                    return(\n                      <div className=\"graph_matriz_confusion\">\n                        <h2>Matriz de confusión de los datos originales vs. las predicciones</h2>\n                        <div className=\"img_graph_confusion\" dangerouslySetInnerHTML={{__html: list_neural.grafico3}} />\n                      </div>\n                    )\n                })}\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'binary'  &&\n            <div className=\"table_result_and_matris_wrapper\">\n              <div className=\"table_excel_grid2\">\n                {/* Tabla con predicciones y datos originales */}\n                <div className=\"table_excel_item2\">\n                  {this.state.datos_entrenamiento.map(function(data_train, index){\n                    return(\n                      <div className=\"structure_table\">\n                        <h3 className=\"title_table\">Predicciones en el conjunto de prueba</h3>\n                        <table id=\"customers\">\n                          <tr>\n                            {Object.keys(data_train.df_originals_predictions_json[0]).map(key => (\n                              <th className={key}>{key}</th>\n                            ))}\n                          </tr>\n\n                          {\n                            self.filteredDataOriginalsPredict().map(function(list_neural) {\n                              if(self.state.red_neuronal_type === 'number')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): parseFloat(list_neural[key]).toFixed(2)}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                              if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): list_neural[key]}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                            })\n                          }\n                        </table>\n                        <div className=\"footer_table_grid2\">\n                          <div className=\"dataTables_info\">\n                            <p>{data_train.df_originals_predictions_json.length} filas</p>\n                          </div>\n                          <div className=\"multipagination\">\n                            <div>\n                            <ReactPaginate\n                              previousLabel={<i className='bx bx-chevron-left'></i>}\n                              nextLabel={<i className='bx bx-chevron-right'></i>}\n                              breakLabel={\"...\"}\n                              breakClassName={\"break-me\"}\n                              pageCount={self.state.nro_pag_total_predict_original}\n                              marginPagesDisplayed={2}\n                              pageRangeDisplayed={5}\n                              forcePage={self.state.nro_pag_actual_predict_original}\n                              onPageChange={self.clickPageTablePredictOriginals}\n                              containerClassName={\"pagination\"}\n                              subContainerClassName={\"pages pagination\"}\n                              activeClassName={\"active\"}>\n                            </ReactPaginate>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n\n                {/* Matriz de confusión */}\n                {this.state.datos_entrenamiento.map(function(list_neural, index){\n                  if(self.state.red_neuronal_type != '')\n                    return(\n                      <div className=\"graph_matriz_confusion\">\n                        <h2>Matriz de confusión de los datos originales vs. las predicciones</h2>\n                        <div className=\"img_graph_confusion\" dangerouslySetInnerHTML={{__html: list_neural.grafico3}} />\n                      </div>\n                    )\n                })}\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'number'  &&\n            <div className=\"table_result_and_matris_wrapper\">\n              <div className=\"table_excel_grid4\">\n                {/* Tabla con predicciones y datos originales */}\n                <div className=\"table_excel_item3\">\n                  {this.state.datos_entrenamiento.map(function(data_train, index){\n                    return(\n                      <div className=\"structure_table\">\n                        <h3 className=\"title_table\">Predicciones en el conjunto de prueba</h3>\n                        <table id=\"customers\">\n                          <tr>\n                            {Object.keys(data_train.df_originals_predictions_json[0]).map(key => (\n                              <th className={key}>{key}</th>\n                            ))}\n                          </tr>\n\n                          {\n                            self.filteredDataOriginalsPredict().map(function(list_neural) {\n                              if(self.state.red_neuronal_type === 'number')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): parseFloat(list_neural[key]).toFixed(2)}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                              if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): list_neural[key]}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                            })\n                          }\n                        </table>\n                        <div className=\"footer_table_grid2\">\n                          <div className=\"dataTables_info\">\n                            <p>{data_train.df_originals_predictions_json.length} filas</p>\n                          </div>\n                          <div className=\"multipagination\">\n                            <div>\n                            <ReactPaginate\n                              previousLabel={<i className='bx bx-chevron-left'></i>}\n                              nextLabel={<i className='bx bx-chevron-right'></i>}\n                              breakLabel={\"...\"}\n                              breakClassName={\"break-me\"}\n                              pageCount={self.state.nro_pag_total_predict_original}\n                              marginPagesDisplayed={2}\n                              pageRangeDisplayed={5}\n                              forcePage={self.state.nro_pag_actual_predict_original}\n                              onPageChange={self.clickPageTablePredictOriginals}\n                              containerClassName={\"pagination\"}\n                              subContainerClassName={\"pages pagination\"}\n                              activeClassName={\"active\"}>\n                            </ReactPaginate>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n        }\n\n        {/* Formulario de la Red Neuronal */}\n        { this.state.loagind_training === 2  &&\n          <form onSubmit={this.consult_red_neuronal}>\n            <div className=\"consultas_red_neuronal_wrapper\" /* style= {{ 'background-image': 'url(../files/redes.png)'}} */>\n              <div className=\"consultas_red_neuronal_header\">\n                <div className=\"background_icon\">\n                  {/* <i class='bx bx-git-repo-forked'></i> */}\n                  <img  src={process.env.PUBLIC_URL + '/files/studio.svg'}></img>\n                  {/* <object  data={process.env.PUBLIC_URL + '/files/machine-learning.svg'}></object> */}\n                </div>\n                <h2 className=\"center\">Utilice el modelo para hacer predicciones sobre nuevos datos</h2>\n              </div>\n              <div className=\"consultas_red_neuronal_container\">\n                {\n                  this.state.datos_entrenamiento.map((list) => (\n                          Object.keys(list.columns_numeric).map((number_column) => {\n                              return (\n                                <div>\n                                  <label className=\"label_input\" for={list.columns_numeric[number_column]}>{list.columns_numeric[number_column].replace('_', ' ')}:</label>\n                                  <input className=\"input\" type=\"number\" step=\"0.001\" keyboardType='numeric' id={list.columns_numeric[number_column]} \n                                  name={list.columns_numeric[number_column]}\n                                  onChange={this.consult_red_handleChange} required/>\n                                </div>\n                              )\n                          })\n                  ))\n                }\n\n\n                {\n                  this.state.datos_entrenamiento.map((list) => (\n                    Object.keys(list.columnas_categoricas_onehot_json).map((name_column, i) => (\n\n                      <div className=\"\">\n                          <label className=\"label_input\">Seleccionar {name_column}:</label>\n                          <select onChange={this.consult_red_handleChange} className=\"input\" aria-label=\"Default select example\" name={name_column} required>\n                            <option selected value=\"\">Seleccionar</option>\n                          {\n                            list.columnas_categoricas_onehot_json[name_column].map((name_column2) => {\n                              return (\n                                <option value={ name_column2 } name={{ name_column2 }}>{ name_column2.replace(name_column + '_', '') }</option>\n                              )\n                            })\n                          }\n                          </select>\n                      </div>\n                    ))\n                  ))\n                }\n              </div>\n              <div className=\"consultas_red_neuronal_submit\">\n                <button className=\"btn_submit_blue_xl\" type=\"submit\">\n                  Predecir\n                  {/* <i class='bx bx-git-repo-forked'></i> */}\n                  {/* <i class='bx bx-brain'></i> */}\n                  <i class='bx bxs-brain'></i>\n                </button>\n              </div>\n            </div>\n          </form>\n        }\n\n        {/* LOADING... */}\n        { this.state.post_loading_training === 1  &&\n          <div className='contenedor_spinner'>\n            <div className='spinner'></div>\n          </div>\n        }\n\n        {/* Visualización del Resultado de la Predicción */}\n        { this.state.post_loading_training === 2  &&\n          <div className=\"result_consult_red_neuronal_wrapper\">\n            <h2 className=\"title_consult_red_neuronal center\">Predicción<i class='bx bxl-redux'></i></h2>\n            {\n              this.state.red_neuronal_type === 'number' &&\n                <div className=\"result_consult_red_neuronal_container\">\n                  <h1>{parseFloat(this.state.result_predict).toFixed(3)}</h1>\n                  <span>{this.state.target_predecir_after_train}</span>\n                </div>\n            }\n            {\n              this.state.red_neuronal_type === 'string'  &&\n                <div className=\"result_consult_red_neuronal_container\">\n                  <h1>{this.state.porcentaje_predict}%</h1>\n                  <h2>{this.state.result_predict}</h2>\n                  <span>{this.state.target_predecir_after_train}</span>\n                </div>\n            }\n            {\n              this.state.red_neuronal_type === 'binary' &&\n                <div className=\"result_consult_red_neuronal_container\">\n                  <h1>{this.state.porcentaje_predict}%</h1>\n                  <h2>{this.state.result_predict}</h2>\n                  <span>{this.state.target_predecir_after_train}</span>\n                </div>\n            }\n          </div>\n        }\n\n        {/* Descargar el Modelo de la Red Neuronal */}\n        { this.state.loagind_training === 2  &&\n          <div className=\"run_red_neuronal_grid\" style= {{ 'padding-top': ''}}>\n            <div className=\"run_red_neuronal_item\">\n              <div className=\"item_btn_submit\">\n                {/* <a href=\"http://localhost:8000/frontend/public/files/modelo_red_neuronal.zip\" download=\"red_neuronal_model\" */}\n                <a href={process.env.PUBLIC_URL + '/files/modelo_red_neuronal.zip' } download=\"red_neuronal_model\"\n                className=\"btn_download_model\">\n                  <i class='bx bxs-download'></i>\n                  Descargar Modelo Entrenado\n                </a>\n              </div>\n            </div>\n          </div>\n        }\n\n        {/* Explicación de como consultar el modelo de la red neuronal */}\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'string'  &&\n            <div className=\"terminal_consult_red_neuronal_wrapper\">\n              <div className=\"terminal_consult_red_neuronal_header\">\n                <div className=\"circulored\"></div>\n                <div className=\"circuloyellow\"></div>\n                <div className=\"circulocalipso\"></div>\n                <h2 className=\"terminal_consult_red_neuronal_title\">Utilice el modelo entrenado para hacer predicciones en python</h2>\n              </div>\n              <div className=\"terminal_consult_red_neuronal_row_grid\">\n                  <p className=\"index\">1</p>\n                  <p><span className=\"igual\">import</span> tensorflow <span className=\"igual\">as</span> tf</p>\n\n                  <p className=\"index\">2</p>\n                  <p className=\"comentario\"># Etiquetas representadas en nombres</p>\n\n                  <p className=\"index\">3</p>\n                  <p>class_names <span className=\"igual\">=</span> [<span className=\"texto\">'</span>\n                      {\n                        <span className=\"texto\">{this.state.class_names.join(\"', '\")}</span>\n                      }\n                    <span className=\"texto\">'</span>]\n                  </p>\n\n                  <p className=\"index\">4</p>\n                  <p className=\"comentario\"># Cargar el modelo</p>\n\n                  <p className=\"index\">5</p>\n                  <p>model <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">keras</span>.<span className=\"tensorflow\">models</span>.<span className=\"tensorflow\">load_model</span>(<span className=\"texto\">'C:/Users/56975/Downloads/modelo_red_neuronal'</span>)</p>\n\n                  <p className=\"index\">6</p>\n                  <p className=\"comentario\"># Datos necesarios para la predicción</p>\n\n                  <p className=\"index\">7</p>\n                  <p>sample <span className=\"igual\">=</span> &#123; </p>\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                        Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => (\n                          <React.Fragment>\n                            <p className=\"index\"> </p>\n                            <p>&emsp; <span className=\"texto\">'{name_column}'</span>: <span className=\"string\">'String'</span>,</p>\n                          </React.Fragment>\n                        ))\n                      ))\n                    }\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                              Object.keys(list.columns_numeric).map((number_column, index) => (\n                                <React.Fragment>\n                                  <p className=\"index\"> </p>\n                                  <p>&emsp; <span className=\"texto\">'{list.columns_numeric[number_column]}'</span>: <span className=\"number\">Number</span>,</p>\n                                </React.Fragment>\n                              ))\n                      ))\n                    }\n\n                  <p className=\"index\">8</p>\n                  <p>&#125;</p>\n\n                  <p className=\"index\">9</p>\n                  <p>input_dict <span className=\"igual\">=</span> &#123;name: tf.<span className=\"tensorflow\">convert_to_tensor</span>([value]) <span className=\"for\">for</span> name, value <span className=\"for\">in</span> sample.<span className=\"tensorflow\">items</span>()&#125;</p>\n\n                  <p className=\"index\">10</p>\n                  <p className=\"comentario\"># Llamar al método y predecir</p>\n\n                  <p className=\"index\">11</p>\n                  <p>predictions <span className=\"igual\">=</span> model.<span className=\"tensorflow\">predict</span>(input_dict)</p>\n\n                  <p className=\"index\">12</p>\n                  <p><span className=\"for\">for</span> i, logits <span className=\"for\">in</span> <span className=\"enumerate\">enumerate</span>(predictions):</p>\n                    <p className=\"index\">13</p>\n                    <p>&emsp; class_idx <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">argmax</span>(logits).<span className=\"tensorflow\">numpy</span>()</p>\n                    <p className=\"index\">14</p>\n                    <p>&emsp; p <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">nn</span>.<span className=\"tensorflow\">softmax</span>(logits)[class_idx].<span className=\"tensorflow\">numpy</span>() <span className=\"for\">*</span> <span className=\"number\">100</span></p>\n                    <p className=\"index\">15</p>\n                    <p>&emsp; result_predict <span className=\"igual\">=</span> class_names[class_idx]</p>\n                    <p className=\"index\">16</p>\n                    <p>&emsp; percentage_predict <span className=\"igual\">=</span> <span className=\"type\">int</span>(p)</p>\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'binary'  &&\n            <div className=\"terminal_consult_red_neuronal_wrapper\">\n              <div className=\"terminal_consult_red_neuronal_header\">\n                <div className=\"circulored\"></div>\n                <div className=\"circuloyellow\"></div>\n                <div className=\"circulocalipso\"></div>\n                <h2 className=\"terminal_consult_red_neuronal_title\">Utilice el modelo entrenado para hacer predicciones en python</h2>\n              </div>\n              <div className=\"terminal_consult_red_neuronal_row_grid\">\n                  <p className=\"index\">1</p>\n                  <p><span className=\"igual\">import</span> tensorflow <span className=\"igual\">as</span> tf</p>\n\n                  <p className=\"index\">2</p>\n                  <p className=\"comentario\"># Etiquetas representadas en nombres</p>\n\n                  <p className=\"index\">3</p>\n                  <p>class_names <span className=\"igual\">=</span> [<span className=\"texto\">'</span>\n                      {\n                        <span className=\"texto\">{this.state.class_names.join(\"', '\")}</span>\n                      }\n                    <span className=\"texto\">'</span>]\n                  </p>\n\n                  <p className=\"index\">4</p>\n                  <p className=\"comentario\"># Cargar el modelo</p>\n\n                  <p className=\"index\">5</p>\n                  <p>model <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">keras</span>.<span className=\"tensorflow\">models</span>.<span className=\"tensorflow\">load_model</span>(<span className=\"texto\">'C:/Users/56975/Downloads/modelo_red_neuronal'</span>)</p>\n\n                  <p className=\"index\">6</p>\n                  <p className=\"comentario\"># Datos necesarios para la predicción</p>\n\n                  <p className=\"index\">7</p>\n                  <p>sample <span className=\"igual\">=</span> &#123; </p>\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                        Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => (\n                          <React.Fragment>\n                            <p className=\"index\"> </p>\n                            <p>&emsp; <span className=\"texto\">'{name_column}'</span>: <span className=\"string\">'String'</span>,</p>\n                          </React.Fragment>\n                        ))\n                      ))\n                    }\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                              Object.keys(list.columns_numeric).map((number_column, index) => (\n                                <React.Fragment>\n                                  <p className=\"index\"> </p>\n                                  <p>&emsp; <span className=\"texto\">'{list.columns_numeric[number_column]}'</span>: <span className=\"number\">Number</span>,</p>\n                                </React.Fragment>\n                              ))\n                      ))\n                    }\n\n                  <p className=\"index\">8</p>\n                  <p>&#125;</p>\n\n                  <p className=\"index\">9</p>\n                  <p>input_dict <span className=\"igual\">=</span> &#123;name: tf.<span className=\"tensorflow\">convert_to_tensor</span>([value]) <span className=\"for\">for</span> name, value <span className=\"for\">in</span> sample.<span className=\"tensorflow\">items</span>()&#125;</p>\n\n                  <p className=\"index\">10</p>\n                  <p className=\"comentario\"># Llamar al método y predecir</p>\n\n                  <p className=\"index\">11</p>\n                  <p>predictions <span className=\"igual\">=</span> model.<span className=\"tensorflow\">predict</span>(input_dict)</p>\n\n                  <p className=\"index\">12</p>\n                  <p>prob <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">nn</span>.<span className=\"tensorflow\">sigmoid</span>(predictions[<span className=\"number\">0</span>])</p>\n\n                  <p className=\"index\">13</p>\n                  <p>number <span className=\"igual\">=</span> prob.<span className=\"tensorflow\">numpy</span>().<span className=\"tensorflow\">round</span>().<span className=\"tensorflow\">astype</span>(int)</p>\n\n                  <p className=\"index\">14</p>\n                  <p>result_predict <span className=\"igual\">=</span> class_names[number[<span className=\"number\">0</span>]]</p>\n\n                  <p className=\"index\">15</p>\n                  <p>percentage_predict <span className=\"igual\">=</span> <span className=\"type\">int</span>(prob.<span className=\"tensorflow\">numpy</span>()[<span className=\"number\">0</span>] * <span className=\"number\">100</span>)</p>\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'number'  &&\n            <div className=\"terminal_consult_red_neuronal_wrapper\">\n              <div className=\"terminal_consult_red_neuronal_header\">\n                <div className=\"circulored\"></div>\n                <div className=\"circuloyellow\"></div>\n                <div className=\"circulocalipso\"></div>\n                <h2 className=\"terminal_consult_red_neuronal_title\">Utilice el modelo entrenado para hacer predicciones en python</h2>\n              </div>\n              <div className=\"terminal_consult_red_neuronal_row_grid\">\n                  <p className=\"index\">1</p>\n                  <p><span className=\"igual\">import</span> tensorflow <span className=\"igual\">as</span> tf</p>\n\n                  <p className=\"index\">2</p>\n                  <p className=\"comentario\"># Cargar el modelo</p>\n\n                  <p className=\"index\">3</p>\n                  <p>model <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">keras</span>.<span className=\"tensorflow\">models</span>.<span className=\"tensorflow\">load_model</span>(<span className=\"texto\">'C:/Users/56975/Downloads/modelo_red_neuronal'</span>)</p>\n\n                  <p className=\"index\">4</p>\n                  <p className=\"comentario\"># Datos necesarios para la predicción</p>\n\n                  <p className=\"index\">5</p>\n                  <p>sample <span className=\"igual\">=</span> &#123; </p>\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                        Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => (\n                          <React.Fragment>\n                            <p className=\"index\"> </p>\n                            <p>&emsp; <span className=\"texto\">'{name_column}'</span>: <span className=\"string\">'String'</span>,</p>\n                          </React.Fragment>\n                        ))\n                      ))\n                    }\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                              Object.keys(list.columns_numeric).map((number_column, index) => (\n                                <React.Fragment>\n                                  <p className=\"index\"> </p>\n                                  <p>&emsp; <span className=\"texto\">'{list.columns_numeric[number_column]}'</span>: <span className=\"number\">Number</span>,</p>\n                                </React.Fragment>\n                              ))\n                      ))\n                    }\n\n                  <p className=\"index\">6</p>\n                  <p>&#125;</p>\n\n                  <p className=\"index\">7</p>\n                  <p>input_dict <span className=\"igual\">=</span> &#123;name: tf.<span className=\"tensorflow\">convert_to_tensor</span>([value]) <span className=\"for\">for</span> name, value <span className=\"for\">in</span> sample.<span className=\"tensorflow\">items</span>()&#125;</p>\n\n                  <p className=\"index\">8</p>\n                  <p className=\"comentario\"># Llamar al método y predecir</p>\n\n                  <p className=\"index\">9</p>\n                  <p>predictions <span className=\"igual\">=</span> model.<span className=\"tensorflow\">predict</span>(input_dict)</p>\n\n                  <p className=\"index\">10</p>\n                  <p>result_predict = predictions[<span className=\"number\">0</span>][<span className=\"number\">0</span>]</p>\n              </div>\n            </div>\n        }\n\n\n\n\n        <div id=\"task-container\" style= {{ 'display': 'none'}}>\n          <div id=\"form-wrapper\">\n            <form onSubmit={this.handleSubmit} id=\"form\">\n              <div className=\"flex-wrapper\">\n                <div style={{flex:6}}>\n                  <input onChange={this.handleChange} className=\"form-control\" id=\"title\" value={this.state.activeItem.title} type=\"text\" name=\"title\" placeholder=\"Add task..\" />\n                </div>\n\n                <div style={{flex:1}}>\n                  <input className=\"btn btn-warning\" id=\"submit\" type=\"submit\" name=\"Add\" />\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <div id=\"list-wrapper\">\n            {tasks.map(function(tasks, index){\n              return(\n                <div key={index} className=\"task-wrapper flex-wrapper\">\n                  <div onClick={() => self.strikeUnstrike(tasks)} style={{flex:7}}>\n\n                    {tasks.completed == false ? (\n                      <span>{tasks.title}</span>\n                    ) : (\n                      <strike>{tasks.title}</strike>\n                    )}\n\n                  </div>\n                  <div style={{flex:1}}>\n                    <button onClick={() => self.startEdit(tasks)} className=\"btn btn-sm btn-outline-info\">Edit</button>\n                  </div>\n\n                  <div style={{flex:1}}>\n                  <button onClick={() => self.deleteItem(tasks)} className=\"btn btn-sm btn-outline-info\">-</button>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}