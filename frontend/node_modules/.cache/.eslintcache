[{"C:\\Users\\56975\\Desktop\\ian_analytics\\frontend\\src\\index.js":"1","C:\\Users\\56975\\Desktop\\ian_analytics\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\56975\\Desktop\\ian_analytics\\frontend\\src\\App.js":"3"},{"size":500,"mtime":1625640428085,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":70678,"mtime":1641691424043,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"e5z8ix",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":1,"source":"15"},"C:\\Users\\56975\\Desktop\\ian_analytics\\frontend\\src\\index.js",[],["16","17"],"C:\\Users\\56975\\Desktop\\ian_analytics\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\56975\\Desktop\\ian_analytics\\frontend\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"],"import './App.css';\nimport React, { useState} from 'react';\nimport ReactPaginate from 'react-paginate';\nimport ReactFlow, { MiniMap, addEdge, removeElements, Controls, Background } from 'react-flow-renderer';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todoList:[],\n      red_neuronal_list:[],\n      dir_excel:null,\n      datos_excel:[],\n      columns_excel:[],\n      columns_excel_sin_datetime:[],\n      activeItem:{\n        id:null,\n        title:'',\n        completed:false,\n      },\n      editing:false,\n      count:0,  //Contador utilizado para reconocer la posición de visualización de datos\n      numero_paginas:0, //Número de paginas según el total de datos y cantidad de datos por páginas\n      filtered:[], //Datos filtrados separados por la cant de datos a visualizar\n      busquedadTableExcel:'',\n      pageNumber:0, //deja la page 1 activada\n      columna_seleccionada: '', // Columna selecciona por un form select permitiendo visualizar la columna target\n\n      datos_entrenamiento: [],\n      count_predict_original:0,  //Contador utilizado para reconocer la posición de visualización de datos\n      nro_pag_total_predict_original:0, //Número de paginas según el total de datos y cantidad de datos por páginas\n      nro_pag_actual_predict_original:0, //deja la page 1 activada\n\n      /* Estructura de la red neuronal */\n      hidden_cap1: 0,\n      hidden_cap2: 0,\n      hidden_cap3: 0,\n      hidden_cap4: 0,\n      hidden_cap5: 0,\n      hidden_cap6: 0,\n      len_train_dataset: '',\n      len_val_dataset: '',\n      len_test_dataset: '',\n      red_neuronal_type: '',\n      class_names: [], // ej: 1: iris setosa, 2:iris versicolor\n      target_predecir_after_train: '',  //Se guarda el target predicho luego del entrenamiento neuronal\n      consult_red_neuronal: '',  //Se guardan para enviar los datos para predecir\n      result_predict: '',\n      porcentaje_predict: 0,\n      pre_loading_train: 0,\n      loagind_training: 0,\n      post_loading_training: 0,\n      elements_public: [],\n    }\n\n    this.fetchTasks = this.fetchTasks.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getCookie = this.getCookie.bind(this)\n\n    this.startEdit = this.startEdit.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.strikeUnstrike = this.strikeUnstrike.bind(this)\n\n    this.run_red_neuronal = this.run_red_neuronal.bind(this)\n    this.handleChange_neural = this.handleChange_neural.bind(this)\n    this.handleSubmit_neural = this.handleSubmit_neural.bind(this)\n\n    this.buscadorTableExcel = this.buscadorTableExcel.bind(this)\n    this.handlePageClick = this.handlePageClick.bind(this)\n\n    this.selectColumnTable = this.selectColumnTable.bind(this)\n    this.clickPageTablePredictOriginals = this.clickPageTablePredictOriginals.bind(this)\n    this.modeloPredeterminadoRedNeuronal = this.modeloPredeterminadoRedNeuronal.bind(this)\n\n    this.consult_red_handleChange = this.consult_red_handleChange.bind(this)\n    this.consult_red_neuronal = this.consult_red_neuronal.bind(this)\n  };\n  \n  /* csrftoken Ruta = 'https://docs.djangoproject.com/en/3.2/ref/csrf/' */\n  getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n  }\n\n  //Activa funciones\n  componentWillMount(){\n    this.fetchTasks()\n  }\n\n  run_red_neuronal(e){\n    this.setState({\n      loagind_training: 1,\n      post_loading_training: 0,\n    })\n    e.preventDefault()\n    /* Limpia los input y selects del form de predicciones */\n    if (document.getElementsByClassName(\"input\").length > 0){\n      for(var i=0; i<document.getElementsByClassName(\"input\").length; i++){\n        document.getElementsByClassName(\"input\")[i].value = \"\";\n      }\n    }\n    var csrftoken = this.getCookie('csrftoken')\n    var url = 'http://127.0.0.1:8000/run_red_neuronal/'\n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify({\n        target_predecir: this.state.columna_seleccionada,\n        datos: this.state.datos_excel,\n      })\n    }).then(response => response.json()) \n      .then(data => \n        this.setState({\n          loagind_training: 2,\n          result_predict: '', /* Limpia el resultado de la predicción */\n          porcentaje_predict: 0,\n          datos_entrenamiento:data,\n          nro_pag_total_predict_original: Math.ceil(data[0].df_originals_predictions_json.length/5),\n          target_predecir_after_train: data[0].target_predecir_after_train,\n          len_train_dataset: data[0].len_train_dataset,\n          len_val_dataset: data[0].len_val_dataset,\n          len_test_dataset: data[0].len_test_dataset,\n          red_neuronal_type: data[0].tipo_red_neuronal,\n          class_names: data[0].class_names\n        }, () => console.log(\"\"), console.log(\"data[0].class_names\"), console.log())\n      )\n  }\n\n  // Listando Tasks\n  fetchTasks(){\n    fetch('http://127.0.0.1:8000/task-list/')\n    .then(response => response.json())\n    .then(data =>\n      this.setState({\n        todoList:data\n      }, () => {\n        console.log(\"\")\n      })\n    )\n  }\n\n  handleChange_neural(e){\n    /* if (document.getElementsByClassName(\"react-flow\").length > 0){\n      document.querySelector('.react-flow__renderer svg').remove('svg')\n      console.log(\"\")\n      setTimeout(() => {  console.log(\"World!\"); }, 5000);\n    } */\n\n    this.setState({\n      dir_excel: e.target.files[0]\n    })\n  }\n\n  //Agregando\n  handleChange(e){\n    var name = e.target.name\n    var value = e.target.value\n    console.log('Name:', name)\n    console.log('Value:', value)\n\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title:value\n      }\n    })\n  }\n\n  //Botón de enviar\n  handleSubmit_neural(e){\n    this.setState({\n      pre_loading_train: 1,\n      elements_public: [],\n      columna_seleccionada: '',\n      hidden_cap1: 0,\n      loagind_training: 0,\n      post_loading_training: 0,\n    })\n\n    /* Limpia el input del buscador de la tabla con los datos */\n    if (document.getElementsByClassName(\"search_table_excel\").length > 0){\n      document.getElementsByClassName(\"search_table_excel\")[0].value = \"\";\n    }\n    /* Limpia el select del target */\n    if (document.getElementsByClassName(\"form_select_target\").length > 0){\n      document.getElementsByClassName(\"form_select_target\")[0].value = \"\";\n    }\n\n    e.preventDefault()\n    let formData = new FormData();\n    formData.append('dir_excel',this.state.dir_excel)\n\n    var csrftoken = this.getCookie('csrftoken')\n    /* var url = 'http://127.0.0.1:8000/load_data/' */\n    var url = 'https://ianstudio.herokuapp.com/load_data/'\n    fetch(url, {\n      method:'POST',\n      headers:{\n        Accept: 'application/json, text/plain, */*',\n      },\n      body:formData,\n    }).then(response => response.json())\n      .then(data =>\n        this.setState({\n          pre_loading_train: 2,\n          count: 0, /* Al cargar un nuevo dataset vuelve a la pag. 1 */\n          pageNumber: 0, /* Al cargar un nuevo dataset vuelve a la pag. 1 */\n          busquedadTableExcel:'', /* Limpia el buscador al cargar un nuevo dataset */\n          datos_excel:data[0].datos_json,\n          columns_excel:data[0].datos_json[0],\n          columns_excel_sin_datetime:data[0].dataframe_sin_datetime[0],\n          /* numero_paginas: Math.ceil(data.length/5) */\n          numero_paginas: Math.ceil(data[0].datos_json.length/5)\n        }, () => {this.modeloPredeterminadoRedNeuronal()}\n        )\n      )\n  }\n\n  //Botón de enviar\n  handleSubmit(e){\n    e.preventDefault()\n    \n    /* csrftoken */\n    var csrftoken = this.getCookie('csrftoken')\n\n    var url = 'http://127.0.0.1:8000/task-create/'\n\n    if(this.state.editing == true){  /* EDITANDO */\n      url = `http://127.0.0.1:8000/task-update/${this.state.activeItem.id}/`\n      this.setState({\n        editing:false\n      })\n    }\n    \n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        /* csrftoken */\n        'X-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify(this.state.activeItem)\n    }).then((response) => {\n        this.fetchTasks()\n        this.setState({\n          activeItem:{\n          id:null,\n          title:'',\n          completed:false,\n        }\n        })\n    }).catch(function(error){\n      console.log('ERROR:', error)\n    })\n  }\n\n  /* EDITAR */\n  startEdit(task){\n    this.setState({\n      activeItem:task,\n      editing:true,\n    })\n  }\n\n  /* ELIMINAR */\n  deleteItem(task){\n    var csrftoken = this.getCookie('csrftoken')\n\n    fetch(`http://127.0.0.1:8000/task-delete/${task.id}/`, {\n      method:'DELETE',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n    }).then((response) => {\n      this.fetchTasks()\n    })\n  }\n\n  /* Subrayado */\n  strikeUnstrike(task){\n    task.completed = !task.completed\n    var csrftoken = this.getCookie('csrftoken')\n    var url = `http://127.0.0.1:8000/task-update/${task.id}/`\n      fetch(url, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          'X-CSRFToken':csrftoken,\n        },\n        body:JSON.stringify({'completed': task.completed, 'title': task.title})\n      }).then(() =>{\n        this.fetchTasks()\n      })\n    console.log(\"\")\n  }\n\n  /* Función de Input Type File */\n  btn_input_file_active() {\n    document.querySelector(\"#ruta_excel\").click()\n    document.querySelector(\"#ruta_excel\").addEventListener(\"change\", function(){\n      if(this.value){\n        let valueStore = this.value.split('\\\\');\n        document.querySelector(\".file_name\").textContent = valueStore[valueStore.length-1]\n      }\n      else {\n        document.querySelector(\".file_name\").textContent = \"Ningún archivo seleccionado\"\n      }\n    })\n  }\n\n  /* Filtro para la tabla */\n  /* filteredDataExcel(prevProps, prevState) { */\n  filteredDataExcel() {\n    if(this.state.busquedadTableExcel.length === 0){\n      return [this.state.datos_excel.slice(this.state.count, this.state.count + 5), Math.ceil(this.state.datos_excel.length/5)]\n    }\n\n    const filtered = this.state.datos_excel.filter(item => {\n      return Object.keys(item).some(key => \n        item[key].toString().toLowerCase().includes(this.state.busquedadTableExcel.toLowerCase())\n      );\n    });\n\n    //const filtered = this.state.datos_excel.filter( poke => poke.Equipo.toLowerCase().includes(this.state.busquedadTableExcel.toLowerCase()))\n    return [filtered.slice(this.state.count, this.state.count + 5), Math.ceil(filtered.length/5)]\n  }\n\n  buscadorTableExcel(e) {\n    this.setState({\n      count: 0,\n      pageNumber: 0,\n      busquedadTableExcel: e.target.value,\n    }, () => {\n      this.setState({numero_paginas: this.filteredDataExcel()[1]})\n      this.colorselectColumnTable()\n    })\n  }\n\n  handlePageClick(e) {\n    this.setState({\n      count: e.selected * 5,\n      pageNumber: e.selected\n    }, () => {\n      this.colorselectColumnTable()\n    })\n  }\n\n  selectColumnTable(e) {\n\n    if(e.target.value == ''){\n      this.setState({\n        columna_seleccionada: '',\n        elements_public: [] }, () => {\n        this.colorselectColumnTable();\n        this.modeloPredeterminadoRedNeuronal();\n      });\n    }\n    else {\n      this.setState({\n        columna_seleccionada: e.target.value,\n        elements_public: [] }, () => {\n        this.colorselectColumnTable();\n      });\n\n\n      e.preventDefault()\n      var csrftoken = this.getCookie('csrftoken')\n      var url = 'http://127.0.0.1:8000/detect_type_neuronal/'\n      fetch(url, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          'X-CSRFToken':csrftoken,\n        },\n        body:JSON.stringify({\n          target_predecir: e.target.value,\n          datos: this.state.datos_excel,\n        })\n      }).then(response => response.json()) \n        .then(data => \n          this.setState({\n            red_neuronal_type: data[0].tipo_red_neuronal,\n            hidden_cap1: data[0].hidden_cap1\n          }, () => { this.modeloPredeterminadoRedNeuronal(); })\n      )\n    }\n  }\n\n  colorselectColumnTable() {\n    /* Elimina la columna seleccionada anteriormente (Remueve la clase activeColorTable) */\n    var td = document.createElement('td');\n    td.classList.remove(\"activeColorTable\")\n\n    document.querySelectorAll(\".activeColorTable\").forEach(function(element) {\n      element.classList.remove(\"activeColorTable\");\n    });\n\n    /* Selecciona la columna indica por form select */\n    var element = document.getElementsByClassName(this.state.columna_seleccionada)\n    for(var i = 0; i < element.length; i++)\n    {\n      element[i].className += \" activeColorTable\";\n    }\n  }\n\n  filteredDataOriginalsPredict() {\n    return this.state.datos_entrenamiento[0].df_originals_predictions_json.slice(this.state.count_predict_original, this.state.count_predict_original + 5)\n  }\n\n  clickPageTablePredictOriginals(e) {\n    this.setState({\n      count_predict_original: e.selected * 5,\n      nro_pag_actual_predict_original: e.selected\n    })\n  }\n\n  /* Librería reactflow*/\n  modeloPredeterminadoRedNeuronal(){\n    const onLoad = (reactFlowInstance) => reactFlowInstance.fitView();\n\n    let elements = []\n    elements.push({ id: 'input_layer', sourcePosition: 'right', type: 'input', data: { label: 'Input Layer' }, position: { x: 50, y: 0 } })\n    elements.push({ id: 'hidden_layer', sourcePosition: 'right', type: 'input', data: { label: 'Hidden Layers' }, position: { x: 300, y: 0 } })\n    elements.push({ id: 'output_layer', sourcePosition: 'right', type: 'input', data: { label: 'Output Layer' }, position: { x: 550, y: 0 } })\n    elements.push({ id: 'total_neurons_output_layer', sourcePosition: 'right', type: 'input', data: { label: '1 neurona' }, position: { x: 550, y: 42 } })\n\n    /* Se crea el array que contiene las neuronas de la input layer  */\n    const elements_input_layer = []\n    Object.keys(this.state.columns_excel_sin_datetime).map((key, i) => {\n      return ([\n        elements_input_layer.push(key)\n      ])\n    })\n\n    /* Elimina la columna target del array de la input layer*/\n    if(this.state.columna_seleccionada != ''){\n      elements_input_layer.splice(elements_input_layer.indexOf(this.state.columna_seleccionada), 1);\n    }\n\n    /* Agrega como título la cantidad total de neuronas en la capa Input Layer */\n    elements.push({ id: 'total_neurons_input_layer', sourcePosition: 'right', type: 'input', data: { label: elements_input_layer.length + ' neuronas' }, position: { x: 50, y: 42 } },)\n\n    /* Agrega las neuronas en la Input Layer */\n    var position = [80] /* Constante para ubicar las neuronas en la capa, como coordenadas gps */\n    elements_input_layer.map((key, i) => {\n      return ([\n        elements.push({ id: key, sourcePosition: 'right', type: 'input', data: { label: key }, position: { x: 50, y: position[0] } },),\n        position.push(position[0] + 80), /* position = [80, 160] */\n        position.splice(0, 1), /* position = [160] # elimina la primera posición*/\n      ])\n    })\n\n\n    /* Agrega el título de la cantidad total de neuronas de la primera hidden layers*/\n    elements.push({ id: 'total_neurons_hidden_layer', sourcePosition: 'right', type: 'input', data: { label: this.state.hidden_cap1 + ' neuronas' }, position: { x: 300, y: 42 } },)\n\n    /* Creación de las neuronas de la hidden layers 1 */\n    /* Unión entre las neuronas de la hidden layers 1 e Input Layer*/\n    if(this.state.hidden_cap1 !== 0){\n      if(this.state.hidden_cap1 <= 8){\n        for (var i = this.state.hidden_cap1; i > 0; i--){\n          /* Crea las neuronas */\n          elements.push({ id: 'capaOculta1_neurona' + i, targetPosition: 'left', sourcePosition: 'right', data: { label: <div>Neurona {i}</div> }, position: { x: 300, y: 80 * i } })\n          /* Agrega las conexiones entre la input layer y la primera hidden layer */\n          elements_input_layer.map((neurona) => {\n            elements.push({ id: 'e'+ i, source: neurona, target: 'capaOculta1_neurona' + i, animated: true , style: { stroke: '#5da7d6' } })\n          })\n        }\n      }\n      else {\n        let cant_total_neuronas = this.state.hidden_cap1\n        for (var i = this.state.hidden_cap1; i > 0; i--){\n          if(i == cant_total_neuronas){\n            elements.push({ id: 'capaOculta1_neurona' + i, targetPosition: 'left', sourcePosition: 'right', data: { label: <div>Neurona {i}</div> }, position: { x: 300, y: 640 } })\n            elements.push({ id: 'punto_seguido1', className: 'punto_seguido',  data: { label: <div></div> }, position: { x: 300, y: 550 } })\n            elements.push({ id: 'punto_seguido2', className: 'punto_seguido', data: { label: <div></div> }, position: { x: 300, y: 570 } })\n            elements.push({ id: 'punto_seguido3', className: 'punto_seguido', data: { label: <div></div> }, position: { x: 300, y: 590 } })\n            elements_input_layer.map((neurona) => {\n              elements.push({ id: 'e3' + i, source: neurona, target: 'capaOculta1_neurona' + i, animated: true , style: { stroke: '#5da7d6' } })\n            })\n          }\n          if(i <=6){\n            /* Crea las neuronas */\n            elements.push({ id: 'capaOculta1_neurona' + i, targetPosition: 'left', sourcePosition: 'right', data: { label: <div>Neurona {i}</div> }, position: { x: 300, y: 80 * i } })\n            /* Agrega las conexiones entre la input layer y la primera hidden layer */\n            elements_input_layer.map((neurona) => {\n              elements.push({ id: 'e3' + i, source: neurona, target: 'capaOculta1_neurona' + i, animated: true , style: { stroke: '#5da7d6' } })\n            })\n          }\n        }\n      }\n    }\n    \n    /* Agrega la neurona de la capa Output Layer */\n    if(this.state.columna_seleccionada != ''){\n      elements.push({ id: this.state.columna_seleccionada, targetPosition: 'left', type: 'output', data: { label: <div>{this.state.columna_seleccionada}</div> }, position: { x: 550, y: position[0] / 2 } })\n    }\n\n    /* Unión (conexión) entre las neuronas de la hidden layer y Output layer */\n    for (var i = 6; i > 0; i--){\n      if(this.state['hidden_cap'+i] !== 0){\n      /* if('this.state.hidden_cap'+i !== 0){ */\n        for (var neu = 1; neu <= this.state['hidden_cap'+i]; neu++){\n          /* console.log('capaOculta' + i + '_neurona' + neu) */\n          if (neu < 7 || neu == this.state['hidden_cap'+i]) {\n            elements.push({ id: 'e4' + i + neu, source: 'capaOculta' + i + '_neurona' + neu, target: this.state.columna_seleccionada, animated: true , style: { stroke: '#5da7d6' } })\n          }\n        }\n      }\n    }\n\n    this.setState({\n      elements_public: elements\n    })\n\n    return elements\n  }\n\n  consult_red_handleChange(e) {\n    if(e.target.name == 'select'){\n      const value = e.target.value\n      const name = e.target.value\n\n      this.setState({\n        consult_red_neuronal: {\n          ...this.state.consult_red_neuronal,\n          [name]: value\n        }\n      })\n    }\n    else {\n      const value = e.target.value\n      const name = e.target.name\n\n      this.setState({\n        consult_red_neuronal: {\n          ...this.state.consult_red_neuronal,\n          [name]: value\n        }\n      })\n    }\n  }\n\n  /* Consultar la Red Neuronal */\n  consult_red_neuronal(e){\n    this.setState({\n      post_loading_training: 1\n    })\n    console.log(this.state.consult_red_neuronal)\n    e.preventDefault()\n    var csrftoken = this.getCookie('csrftoken')\n    var url = 'http://127.0.0.1:8000/consult_red_neuronal/'\n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n      body: JSON.stringify({\n        data_consult_red_neuronal:this.state.consult_red_neuronal,\n        red_neuronal_type: this.state.red_neuronal_type,\n        class_names: this.state.class_names,\n      })\n    }).then(response => response.json()) \n      .then(data => \n        this.setState({\n          post_loading_training: 2,\n          result_predict: data[0].result_predict,\n          porcentaje_predict: data[0].porcentaje_predict\n        }, () => console.log(data[0].result_predict), console.log(\"RESULTADO PREDICT: \"))\n      )\n  }\n\n\n  render(){\n    var tasks = this.state.todoList\n    var datos_excel = this.state.datos_excel\n    var columnas_excel = this.state.columns_excel\n    var columnas_excel_sin_datetime = this.state.columns_excel_sin_datetime\n    var self = this\n    return(\n      <div className=\"container\">\n        {/* Selección de dataset */}\n        <div className=\"background_one\" style={{ 'background-image': 'url(../files/bg_light_blue_right.png)'}}>\n          <h1 className=\"title_principal text-gradient-blue-purple\">Seleccione una&nbsp;<strong>fuente de datos</strong>&nbsp;para iniciar el proceso {/* <img  src={process.env.PUBLIC_URL + '/files/data-cleaning.svg'}></img> */}</h1>\n          <div className=\"button_load_excel_grid\">\n            <form onSubmit={this.handleSubmit_neural}>\n              <input onChange={this.handleChange_neural} type=\"file\" className=\"input_file_display\" id=\"ruta_excel\" name=\"ruta_excel\"></input>\n              <div className=\"button_load_excel_item\">\n                <div className=\"btn_input_file\" onClick={this.btn_input_file_active} style= {{ 'background-image': 'url(../files/cubes_red.svg)'}}>\n                  <p className=\"icon_input_file\">\n                    <i className='bx bx-upload'></i>\n                    <p className=\"file_name\">Ningún archivo seleccionado</p>\n                  </p>\n                  <p className=\"title_input_file\">Seleccionar Archivo</p>\n                  <p className=\"text_input_file\">Cargue archivos excel, archivos csv o archivos de texto.</p>\n                </div>\n                <div className=\"item_btn_submit\">\n                  <input className=\"btn_submit_file\" id=\"submit\" type=\"submit\" name=\"Add\" value=\"Cargar Datos\"/>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {/* LOADING... */}\n        { this.state.pre_loading_train === 1  &&\n            <div className='contenedor_spinner'>\n              <div className='spinner'></div>\n            </div>\n        }\n\n        {/* Table con visualización de datos */}\n        { this.state.pre_loading_train === 2  &&\n          <div className=\"table_excel_grid\">\n            <div className=\"table_excel_item\">\n              <div className=\"structure_table\">\n                <h3 className=\"title_table\">Visualización del conjunto de datos</h3>\n                <div className=\"btn_search_table_excel\"> \n                  <i className='bx bx-search-alt-2' ></i>\n                  <input onChange={this.buscadorTableExcel} type=\"text\" placeholder=\"Buscador\" className=\"search_table_excel\"></input>\n                </div>\n                <table id=\"customers\">\n                  <tr>\n                    {Object.keys(columnas_excel).map(key => (\n                        <th className={key}>{key}</th>\n                      ))}\n                  </tr>\n                  {\n                    this.filteredDataExcel()[0].map(function(list_neural) {\n                      return (\n                        <tr>\n                          {\n                            Object.keys(columnas_excel).map((key, i) => (\n                              <td className={key}>{list_neural[key]}</td>\n                              ))\n                            }\n                        </tr>\n                      )\n                    })\n                  }\n                </table>\n                <div className=\"footer_table_grid\">\n                  <div className=\"dataTables_info\">\n                    <p>{datos_excel.length} filas × {Object.keys(columnas_excel).length - 1} columns</p>\n                  </div>\n                  <div className=\"multipagination\">\n                    <div>\n                    <ReactPaginate\n                      previousLabel={<i className='bx bx-chevron-left'></i>}\n                      nextLabel={<i className='bx bx-chevron-right'></i>}\n                      breakLabel={\"...\"}\n                      breakClassName={\"break-me\"}\n                      pageCount={this.state.numero_paginas}\n                      marginPagesDisplayed={2}\n                      pageRangeDisplayed={5}\n                      forcePage={this.state.pageNumber}\n                      onPageChange={this.handlePageClick}\n                      containerClassName={\"pagination\"}\n                      subContainerClassName={\"pages pagination\"}\n                      activeClassName={\"active\"}>\n                    </ReactPaginate>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n\n        { this.state.pre_loading_train === 2  &&\n          <form onSubmit={this.run_red_neuronal}>\n            {/* Seleccionar target*/}\n            <div className=\"select_target_grid\" style= {{ 'padding-top': ''}}>\n              <div className=\"form_select_item\">\n                <img className=\"img_target\" src={process.env.PUBLIC_URL + '/files/target2.png'}></img>\n                <h4>Seleccionar Columna a <strong style={{ 'background-image': 'url(../files/decoration_title.svg)'}}>Predecir</strong></h4>\n                <div className=\"form_select_content\">\n                  <select onChange={this.selectColumnTable} className=\"form_select_target\" aria-label=\"Default select example\" required>\n                      <option selected value=\"\">Seleccionar</option>\n                      {Object.keys(columnas_excel_sin_datetime).filter(key => key !== '').map(key => (\n                        <option className={key}>{key}</option>\n                      ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {/* Ejecutar red neuronal con btn (RUN) */}\n                <div className=\"run_red_neuronal_grid\" style= {{ 'padding-top': ''}}>\n                  <div className=\"run_red_neuronal_item\">\n                    <button className=\"run_red_neuronal_btn_blue_submit\" id=\"submit\" type=\"submit\" name=\"Add\" value=\"\">\n                      Entrenar Red Neuronal <i class='bx bx-play-circle'></i>\n                    </button>\n                  </div>\n                </div>\n          </form>\n        }\n\n        {/* Estructura de la Red Neuronal */}\n        { this.state.pre_loading_train === 2  &&\n          <div className=\"design_neural_network\">\n            <h1>Configuración predeterminada del modelo <img  src={process.env.PUBLIC_URL + '/files/training_result2.png'}></img></h1>\n              <ReactFlow \n                onLoad={(reactFlowInstance) => reactFlowInstance.fitView()}\n                /* elements={this.modeloPredeterminadoRedNeuronal()} */\n                elements={this.state.elements_public}\n                defaultZoom={0.78}\n                defaultPosition={[200, 8]}\n                style={{width:'1007px', height:'60vh'}}\n                snapToGrid={true}\n                snapGrid={[5, 5]}\n                zoomOnScroll={false}\n                zoomOnPinch={false}\n              >\n                <Controls/>\n                <Background \n                  variant=\"lines\"\n                />\n                <addEdge/>\n              </ReactFlow>\n          </div>\n        }\n\n        {/* LOADING... */}\n        { this.state.loagind_training === 1  &&\n          <div className='contenedor_spinner'>\n            <div className='spinner'></div>\n          </div>\n        }\n\n        {/* Gráfico de barra de porcentajes sobre datos de entrenamiento y validación */}\n        { this.state.loagind_training === 2  &&\n          <div className=\"bar_divide_bar_wrapper\">\n            <div className=\"bar_divide_bar_header_img\">\n              <img  src={process.env.PUBLIC_URL + '/files/train_vali_test2.svg'}></img>\n              {/* <object  data={process.env.PUBLIC_URL + '/files/train_vali_test2.svg'}></object> */}\n            </div>\n            <div className=\"bar_divide_bar_header\">\n              <h2 className=\"center\">División del DataFrame en conjuntos de entrenamiento, validación y prueba</h2>\n  {/*             <div className=\"background_icon_bar_divide\">\n                <i class='bx bx-cut'></i>\n              </div> */}\n            </div>\n            <div className=\"bar_divide_bar_container\">\n                    <div className=\"training_set\">\n                      <span className=\"training_set_cantidad\">{this.state.len_train_dataset} ejemplos</span>\n                      <span className=\"training_set_porcentaje\">80%</span>\n                    </div>\n                    <div className=\"val_set\">\n                      <span className=\"val_set_cantidad\">{this.state.len_val_dataset}</span>\n                      <span className=\"val_set_porcentaje\">10%</span>\n                    </div>\n                    <div className=\"test_set\">\n                      <span className=\"test_set_cantidad\">{this.state.len_test_dataset}</span>\n                      <span className=\"test_set_porcentaje\">10%</span>\n                    </div>\n                    <span className=\"subconjuntos training_set_conj\">Training Set</span>\n                    <span className=\"subconjuntos val_set_conj\">Val Set</span>\n                    <span className=\"subconjuntos test_set_conj\">Test Set</span>\n            </div>\n          </div>\n        }\n\n        {/* Gráfico de conectividad */}\n        { this.state.loagind_training === 2  &&\n          this.state.datos_entrenamiento.map(function(list_neural, index){\n            return (\n              <React.Fragment>\n                <div className=\"graficos_connectivity_grid\">\n                  <div className=\"graf_connectivity_img\">\n                    <img  src={process.env.PUBLIC_URL + '/files/connectivity2.png'}></img>\n                    {/* <object  data={process.env.PUBLIC_URL + '/files/connectivity3.svg'}></object> */}\n                  </div>\n                  <div className=\"graficos_connectivity_header\">\n                    <h2 className=\"grafico_connectivity_title\">Arquitectura del modelo resultante (gráfico de conectividad)</h2>\n                  </div>\n                  <a href={process.env.PUBLIC_URL + '/files/Connectivity_graph.png'} target=\"_blank\">\n                    {/* <img src={require('./images/Connectivity_graph.png').default}></img> */}\n                    <img src={process.env.PUBLIC_URL + '/files/Connectivity_graph.png'} alt=\"Image1\"></img>\n\n                    {/* <img src=\"http://localhost:8000/frontend/public/files/Connectivity_graph.png\" alt=\"Image1\"></img> */}\n\n                    {/* <img src=\"http://localhost:8000/files/Connectivity_graph.png\" alt=\"Image1\" ></img> */}\n                    {/* <img src=\"%PUBLIC_URL%/Connectivity_graph.png\" alt=\"Image1\" ></img> */}\n                    {/* <img src=\"http://localhost:8000/Connectivity_graph.png\" alt=\"Image1\" ></img> */}\n                  </a>\n                </div>\n              </React.Fragment>\n            )\n          })\n        }\n\n        {/* Gráficos de entrenamiento (precisión y perdida)*/}\n        { this.state.loagind_training === 2  &&\n          this.state.datos_entrenamiento.map(function(list_neural, index){\n            if(self.state.red_neuronal_type != '')\n              return(\n                <div className=\"graficos_training_wrapper\">\n                    <div className=\"graficos_training_img\">\n                      <img  src={process.env.PUBLIC_URL + '/files/training_result3.png'}></img>\n                    </div>\n                    <div className=\"graficos_training_header\">\n                      {/* <div className=\"background_icon_graph_training\">\n                        <i class='bx bx-pulse'></i>\n                      </div> */}\n                      <h2 className=\"graficos_training_title\">Resultados del entrenamiento de la red neuronal en los conjuntos de entrenamiento y validación</h2>\n                    </div>\n                  <div className=\"graficos_abs_square_grid\">\n                    <div className=\"graph_precision\">\n                      <h2>Visualice la precisión del modelo a lo largo del tiempo</h2>\n                      <div className=\"img_graph_precision\" dangerouslySetInnerHTML={{__html: list_neural.grafico1}} />\n                    </div>\n                    <div className=\"graph_perdida\">\n                      <h2>Visualice la función de pérdida a lo largo del tiempo</h2>\n                      <div className=\"img_graph_perdida\" dangerouslySetInnerHTML={{__html: list_neural.grafico2}} />\n                    </div>\n\n                    {/* Tabla con estadisticas finales del entrenamiento */}\n                    <div className=\"table_excel_grid3\">\n                      <div className=\"table_statics_jupyter_item\">\n                        <div className=\"structure_table_statics_jupyter\">\n                          <h3 className=\"title_table_statics_jupyter\">Rendimiento general del modelo</h3>\n                          <table id=\"statics_jupyter\">\n                            <tr>\n                            {Object.keys(list_neural.datos_hist_tail[0]).map(key => (\n                                  <th className={key}>{key}</th>\n                            ))}\n                            </tr>\n                            {\n                              list_neural.datos_hist_tail.map(function(list_neural_statics) {\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(list_neural.datos_hist_tail[0]).map((key, i) => (\n                                        <td className={key}>{ list_neural_statics[key] % 1 != 0 ? (parseFloat(list_neural_statics[key]).toFixed(4)): list_neural_statics[key]}</td>\n                                        ))\n                                      }\n                                  </tr>\n                                )\n                              })\n                            }\n                          </table>\n                        </div>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n              )\n          })\n        }\n\n        {/* Resultados de loss, mse y mae*/}\n        { this.state.loagind_training === 2  &&\n          this.state.datos_entrenamiento.map(function(list_neural, index){\n            if(self.state.red_neuronal_type === 'number')\n              return(\n                <div className=\"statics_container\">\n                  <img className=\"img_target\" src={process.env.PUBLIC_URL + '/files/timer.svg'}></img>\n                  <h2 className=\"section_title\">Evaluación del modelo entrenado en el conjunto de datos de prueba <img  src={process.env.PUBLIC_URL + '/files/acurracy.svg'}></img></h2>\n                  <div className=\"statics_row\">\n                    <div className=\"statics_grid loss_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.loss).toFixed(2) }</div>\n                      <p className=\"statics_sub_title\">loss</p>\n                    </div>\n                    <div className=\"statics_grid accuracy_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.mae).toFixed(2) }</div>\n                      <p className=\"statics_sub_title\">mae</p>\n                    </div>\n                    <div className=\"statics_grid mse_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.mse).toFixed(2) }</div>\n                      <p className=\"statics_sub_title\">mse</p>\n                    </div>\n                  </div>\n                </div>\n              )\n            \n            if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n              return(\n                <div className=\"statics_container\">\n                  <img className=\"img_target\" src={process.env.PUBLIC_URL + '/files/timer.svg'}></img>\n                  <h2 className=\"section_title\">Evaluación del modelo entrenado en el conjunto de datos de prueba <img  src={process.env.PUBLIC_URL + '/files/acurracy.svg'}></img></h2>\n                  <div className=\"statics_row_Accuracy\">\n                    <div className=\"statics_grid loss_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.loss).toFixed(0) }</div>\n                      <p className=\"statics_sub_title\">loss</p>\n                    </div>\n                    <div className=\"statics_grid accuracy_result\">\n                      <div className=\"statics_number\">{ parseFloat(list_neural.mae).toFixed(0) }%</div>\n                      <p className=\"statics_sub_title\">Accuracy </p>\n                    </div>\n                  </div>\n                </div>\n              )\n          })\n        }\n\n        {/* Table con result originales vs predicciones - Matriz de confusión*/}\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'string'  &&\n            <div className=\"table_result_and_matris_wrapper\">\n              <div className=\"table_excel_grid2\">\n                {/* Tabla con predicciones y datos originales */}\n                <div className=\"table_excel_item2\">\n                  {this.state.datos_entrenamiento.map(function(data_train, index){\n                    return(\n                      <div className=\"structure_table\">\n                        <h3 className=\"title_table\">Predicciones en el conjunto de prueba</h3>\n                        <table id=\"customers\">\n                          <tr>\n                            {Object.keys(data_train.df_originals_predictions_json[0]).map(key => (\n                              <th className={key}>{key}</th>\n                            ))}\n                          </tr>\n\n                          {\n                            self.filteredDataOriginalsPredict().map(function(list_neural) {\n                              if(self.state.red_neuronal_type === 'number')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): parseFloat(list_neural[key]).toFixed(2)}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                              if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): list_neural[key]}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                            })\n                          }\n                        </table>\n                        <div className=\"footer_table_grid\">\n                          <div className=\"dataTables_info\">\n                            <p>{data_train.df_originals_predictions_json.length} filas</p>\n                          </div>\n                          <div className=\"multipagination\">\n                            <div>\n                            <ReactPaginate\n                              previousLabel={<i className='bx bx-chevron-left'></i>}\n                              nextLabel={<i className='bx bx-chevron-right'></i>}\n                              breakLabel={\"...\"}\n                              breakClassName={\"break-me\"}\n                              pageCount={self.state.nro_pag_total_predict_original}\n                              marginPagesDisplayed={2}\n                              pageRangeDisplayed={5}\n                              forcePage={self.state.nro_pag_actual_predict_original}\n                              onPageChange={self.clickPageTablePredictOriginals}\n                              containerClassName={\"pagination\"}\n                              subContainerClassName={\"pages pagination\"}\n                              activeClassName={\"active\"}>\n                            </ReactPaginate>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n\n                {/* Matriz de confusión */}\n                {this.state.datos_entrenamiento.map(function(list_neural, index){\n                  if(self.state.red_neuronal_type != '')\n                    return(\n                      <div className=\"graph_matriz_confusion\">\n                        <h2>Matriz de confusión de los datos originales vs. las predicciones</h2>\n                        <div className=\"img_graph_confusion\" dangerouslySetInnerHTML={{__html: list_neural.grafico3}} />\n                      </div>\n                    )\n                })}\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'binary'  &&\n            <div className=\"table_result_and_matris_wrapper\">\n              <div className=\"table_excel_grid2\">\n                {/* Tabla con predicciones y datos originales */}\n                <div className=\"table_excel_item2\">\n                  {this.state.datos_entrenamiento.map(function(data_train, index){\n                    return(\n                      <div className=\"structure_table\">\n                        <h3 className=\"title_table\">Predicciones en el conjunto de prueba</h3>\n                        <table id=\"customers\">\n                          <tr>\n                            {Object.keys(data_train.df_originals_predictions_json[0]).map(key => (\n                              <th className={key}>{key}</th>\n                            ))}\n                          </tr>\n\n                          {\n                            self.filteredDataOriginalsPredict().map(function(list_neural) {\n                              if(self.state.red_neuronal_type === 'number')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): parseFloat(list_neural[key]).toFixed(2)}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                              if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): list_neural[key]}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                            })\n                          }\n                        </table>\n                        <div className=\"footer_table_grid2\">\n                          <div className=\"dataTables_info\">\n                            <p>{data_train.df_originals_predictions_json.length} filas</p>\n                          </div>\n                          <div className=\"multipagination\">\n                            <div>\n                            <ReactPaginate\n                              previousLabel={<i className='bx bx-chevron-left'></i>}\n                              nextLabel={<i className='bx bx-chevron-right'></i>}\n                              breakLabel={\"...\"}\n                              breakClassName={\"break-me\"}\n                              pageCount={self.state.nro_pag_total_predict_original}\n                              marginPagesDisplayed={2}\n                              pageRangeDisplayed={5}\n                              forcePage={self.state.nro_pag_actual_predict_original}\n                              onPageChange={self.clickPageTablePredictOriginals}\n                              containerClassName={\"pagination\"}\n                              subContainerClassName={\"pages pagination\"}\n                              activeClassName={\"active\"}>\n                            </ReactPaginate>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n\n                {/* Matriz de confusión */}\n                {this.state.datos_entrenamiento.map(function(list_neural, index){\n                  if(self.state.red_neuronal_type != '')\n                    return(\n                      <div className=\"graph_matriz_confusion\">\n                        <h2>Matriz de confusión de los datos originales vs. las predicciones</h2>\n                        <div className=\"img_graph_confusion\" dangerouslySetInnerHTML={{__html: list_neural.grafico3}} />\n                      </div>\n                    )\n                })}\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'number'  &&\n            <div className=\"table_result_and_matris_wrapper\">\n              <div className=\"table_excel_grid4\">\n                {/* Tabla con predicciones y datos originales */}\n                <div className=\"table_excel_item3\">\n                  {this.state.datos_entrenamiento.map(function(data_train, index){\n                    return(\n                      <div className=\"structure_table\">\n                        <h3 className=\"title_table\">Predicciones en el conjunto de prueba</h3>\n                        <table id=\"customers\">\n                          <tr>\n                            {Object.keys(data_train.df_originals_predictions_json[0]).map(key => (\n                              <th className={key}>{key}</th>\n                            ))}\n                          </tr>\n\n                          {\n                            self.filteredDataOriginalsPredict().map(function(list_neural) {\n                              if(self.state.red_neuronal_type === 'number')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): parseFloat(list_neural[key]).toFixed(2)}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                              if(self.state.red_neuronal_type === 'string' || self.state.red_neuronal_type === 'binary')\n                                return (\n                                  <tr>\n                                    {\n                                      Object.keys(data_train.df_originals_predictions_json[0]).map((key, i) => (\n                                        <td className={key}>{ key == '' ? (list_neural[key]): list_neural[key]}</td>\n                                      ))\n                                    }\n                                  </tr>\n                                )\n                            })\n                          }\n                        </table>\n                        <div className=\"footer_table_grid2\">\n                          <div className=\"dataTables_info\">\n                            <p>{data_train.df_originals_predictions_json.length} filas</p>\n                          </div>\n                          <div className=\"multipagination\">\n                            <div>\n                            <ReactPaginate\n                              previousLabel={<i className='bx bx-chevron-left'></i>}\n                              nextLabel={<i className='bx bx-chevron-right'></i>}\n                              breakLabel={\"...\"}\n                              breakClassName={\"break-me\"}\n                              pageCount={self.state.nro_pag_total_predict_original}\n                              marginPagesDisplayed={2}\n                              pageRangeDisplayed={5}\n                              forcePage={self.state.nro_pag_actual_predict_original}\n                              onPageChange={self.clickPageTablePredictOriginals}\n                              containerClassName={\"pagination\"}\n                              subContainerClassName={\"pages pagination\"}\n                              activeClassName={\"active\"}>\n                            </ReactPaginate>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n        }\n\n        {/* Formulario de la Red Neuronal */}\n        { this.state.loagind_training === 2  &&\n          <form onSubmit={this.consult_red_neuronal}>\n            <div className=\"consultas_red_neuronal_wrapper\" /* style= {{ 'background-image': 'url(../files/redes.png)'}} */>\n              <div className=\"consultas_red_neuronal_header\">\n                <div className=\"background_icon\">\n                  {/* <i class='bx bx-git-repo-forked'></i> */}\n                  <img  src={process.env.PUBLIC_URL + '/files/studio.svg'}></img>\n                  {/* <object  data={process.env.PUBLIC_URL + '/files/machine-learning.svg'}></object> */}\n                </div>\n                <h2 className=\"center\">Utilice el modelo para hacer predicciones sobre nuevos datos</h2>\n              </div>\n              <div className=\"consultas_red_neuronal_container\">\n                {\n                  this.state.datos_entrenamiento.map((list) => (\n                          Object.keys(list.columns_numeric).map((number_column) => {\n                              return (\n                                <div>\n                                  <label className=\"label_input\" for={list.columns_numeric[number_column]}>{list.columns_numeric[number_column].replace('_', ' ')}:</label>\n                                  <input className=\"input\" type=\"number\" step=\"0.001\" keyboardType='numeric' id={list.columns_numeric[number_column]} \n                                  name={list.columns_numeric[number_column]}\n                                  onChange={this.consult_red_handleChange} required/>\n                                </div>\n                              )\n                          })\n                  ))\n                }\n\n\n                {\n                  this.state.datos_entrenamiento.map((list) => (\n                    Object.keys(list.columnas_categoricas_onehot_json).map((name_column, i) => (\n\n                      <div className=\"\">\n                          <label className=\"label_input\">Seleccionar {name_column}:</label>\n                          <select onChange={this.consult_red_handleChange} className=\"input\" aria-label=\"Default select example\" name={name_column} required>\n                            <option selected value=\"\">Seleccionar</option>\n                          {\n                            list.columnas_categoricas_onehot_json[name_column].map((name_column2) => {\n                              return (\n                                <option value={ name_column2 } name={{ name_column2 }}>{ name_column2.replace(name_column + '_', '') }</option>\n                              )\n                            })\n                          }\n                          </select>\n                      </div>\n                    ))\n                  ))\n                }\n              </div>\n              <div className=\"consultas_red_neuronal_submit\">\n                <button className=\"btn_submit_blue_xl\" type=\"submit\">\n                  Predecir\n                  {/* <i class='bx bx-git-repo-forked'></i> */}\n                  {/* <i class='bx bx-brain'></i> */}\n                  <i class='bx bxs-brain'></i>\n                </button>\n              </div>\n            </div>\n          </form>\n        }\n\n        {/* LOADING... */}\n        { this.state.post_loading_training === 1  &&\n          <div className='contenedor_spinner'>\n            <div className='spinner'></div>\n          </div>\n        }\n\n        {/* Visualización del Resultado de la Predicción */}\n        { this.state.post_loading_training === 2  &&\n          <div className=\"result_consult_red_neuronal_wrapper\">\n            <h2 className=\"title_consult_red_neuronal center\">Predicción<i class='bx bxl-redux'></i></h2>\n            {\n              this.state.red_neuronal_type === 'number' &&\n                <div className=\"result_consult_red_neuronal_container\">\n                  <h1>{parseFloat(this.state.result_predict).toFixed(3)}</h1>\n                  <span>{this.state.target_predecir_after_train}</span>\n                </div>\n            }\n            {\n              this.state.red_neuronal_type === 'string'  &&\n                <div className=\"result_consult_red_neuronal_container\">\n                  <h1>{this.state.porcentaje_predict}%</h1>\n                  <h2>{this.state.result_predict}</h2>\n                  <span>{this.state.target_predecir_after_train}</span>\n                </div>\n            }\n            {\n              this.state.red_neuronal_type === 'binary' &&\n                <div className=\"result_consult_red_neuronal_container\">\n                  <h1>{this.state.porcentaje_predict}%</h1>\n                  <h2>{this.state.result_predict}</h2>\n                  <span>{this.state.target_predecir_after_train}</span>\n                </div>\n            }\n          </div>\n        }\n\n        {/* Descargar el Modelo de la Red Neuronal */}\n        { this.state.loagind_training === 2  &&\n          <div className=\"run_red_neuronal_grid\" style= {{ 'padding-top': ''}}>\n            <div className=\"run_red_neuronal_item\">\n              <div className=\"item_btn_submit\">\n                {/* <a href=\"http://localhost:8000/frontend/public/files/modelo_red_neuronal.zip\" download=\"red_neuronal_model\" */}\n                <a href={process.env.PUBLIC_URL + '/files/modelo_red_neuronal.zip' } download=\"red_neuronal_model\"\n                className=\"btn_download_model\">\n                  <i class='bx bxs-download'></i>\n                  Descargar Modelo Entrenado\n                </a>\n              </div>\n            </div>\n          </div>\n        }\n\n        {/* Explicación de como consultar el modelo de la red neuronal */}\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'string'  &&\n            <div className=\"terminal_consult_red_neuronal_wrapper\">\n              <div className=\"terminal_consult_red_neuronal_header\">\n                <div className=\"circulored\"></div>\n                <div className=\"circuloyellow\"></div>\n                <div className=\"circulocalipso\"></div>\n                <h2 className=\"terminal_consult_red_neuronal_title\">Utilice el modelo entrenado para hacer predicciones en python</h2>\n              </div>\n              <div className=\"terminal_consult_red_neuronal_row_grid\">\n                  <p className=\"index\">1</p>\n                  <p><span className=\"igual\">import</span> tensorflow <span className=\"igual\">as</span> tf</p>\n\n                  <p className=\"index\">2</p>\n                  <p className=\"comentario\"># Etiquetas representadas en nombres</p>\n\n                  <p className=\"index\">3</p>\n                  <p>class_names <span className=\"igual\">=</span> [<span className=\"texto\">'</span>\n                      {\n                        <span className=\"texto\">{this.state.class_names.join(\"', '\")}</span>\n                      }\n                    <span className=\"texto\">'</span>]\n                  </p>\n\n                  <p className=\"index\">4</p>\n                  <p className=\"comentario\"># Cargar el modelo</p>\n\n                  <p className=\"index\">5</p>\n                  <p>model <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">keras</span>.<span className=\"tensorflow\">models</span>.<span className=\"tensorflow\">load_model</span>(<span className=\"texto\">'C:/Users/56975/Downloads/modelo_red_neuronal'</span>)</p>\n\n                  <p className=\"index\">6</p>\n                  <p className=\"comentario\"># Datos necesarios para la predicción</p>\n\n                  <p className=\"index\">7</p>\n                  <p>sample <span className=\"igual\">=</span> &#123; </p>\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                        Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => (\n                          <React.Fragment>\n                            <p className=\"index\"> </p>\n                            <p>&emsp; <span className=\"texto\">'{name_column}'</span>: <span className=\"string\">'String'</span>,</p>\n                          </React.Fragment>\n                        ))\n                      ))\n                    }\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                              Object.keys(list.columns_numeric).map((number_column, index) => (\n                                <React.Fragment>\n                                  <p className=\"index\"> </p>\n                                  <p>&emsp; <span className=\"texto\">'{list.columns_numeric[number_column]}'</span>: <span className=\"number\">Number</span>,</p>\n                                </React.Fragment>\n                              ))\n                      ))\n                    }\n\n                  <p className=\"index\">8</p>\n                  <p>&#125;</p>\n\n                  <p className=\"index\">9</p>\n                  <p>input_dict <span className=\"igual\">=</span> &#123;name: tf.<span className=\"tensorflow\">convert_to_tensor</span>([value]) <span className=\"for\">for</span> name, value <span className=\"for\">in</span> sample.<span className=\"tensorflow\">items</span>()&#125;</p>\n\n                  <p className=\"index\">10</p>\n                  <p className=\"comentario\"># Llamar al método y predecir</p>\n\n                  <p className=\"index\">11</p>\n                  <p>predictions <span className=\"igual\">=</span> model.<span className=\"tensorflow\">predict</span>(input_dict)</p>\n\n                  <p className=\"index\">12</p>\n                  <p><span className=\"for\">for</span> i, logits <span className=\"for\">in</span> <span className=\"enumerate\">enumerate</span>(predictions):</p>\n                    <p className=\"index\">13</p>\n                    <p>&emsp; class_idx <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">argmax</span>(logits).<span className=\"tensorflow\">numpy</span>()</p>\n                    <p className=\"index\">14</p>\n                    <p>&emsp; p <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">nn</span>.<span className=\"tensorflow\">softmax</span>(logits)[class_idx].<span className=\"tensorflow\">numpy</span>() <span className=\"for\">*</span> <span className=\"number\">100</span></p>\n                    <p className=\"index\">15</p>\n                    <p>&emsp; result_predict <span className=\"igual\">=</span> class_names[class_idx]</p>\n                    <p className=\"index\">16</p>\n                    <p>&emsp; percentage_predict <span className=\"igual\">=</span> <span className=\"type\">int</span>(p)</p>\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'binary'  &&\n            <div className=\"terminal_consult_red_neuronal_wrapper\">\n              <div className=\"terminal_consult_red_neuronal_header\">\n                <div className=\"circulored\"></div>\n                <div className=\"circuloyellow\"></div>\n                <div className=\"circulocalipso\"></div>\n                <h2 className=\"terminal_consult_red_neuronal_title\">Utilice el modelo entrenado para hacer predicciones en python</h2>\n              </div>\n              <div className=\"terminal_consult_red_neuronal_row_grid\">\n                  <p className=\"index\">1</p>\n                  <p><span className=\"igual\">import</span> tensorflow <span className=\"igual\">as</span> tf</p>\n\n                  <p className=\"index\">2</p>\n                  <p className=\"comentario\"># Etiquetas representadas en nombres</p>\n\n                  <p className=\"index\">3</p>\n                  <p>class_names <span className=\"igual\">=</span> [<span className=\"texto\">'</span>\n                      {\n                        <span className=\"texto\">{this.state.class_names.join(\"', '\")}</span>\n                      }\n                    <span className=\"texto\">'</span>]\n                  </p>\n\n                  <p className=\"index\">4</p>\n                  <p className=\"comentario\"># Cargar el modelo</p>\n\n                  <p className=\"index\">5</p>\n                  <p>model <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">keras</span>.<span className=\"tensorflow\">models</span>.<span className=\"tensorflow\">load_model</span>(<span className=\"texto\">'C:/Users/56975/Downloads/modelo_red_neuronal'</span>)</p>\n\n                  <p className=\"index\">6</p>\n                  <p className=\"comentario\"># Datos necesarios para la predicción</p>\n\n                  <p className=\"index\">7</p>\n                  <p>sample <span className=\"igual\">=</span> &#123; </p>\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                        Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => (\n                          <React.Fragment>\n                            <p className=\"index\"> </p>\n                            <p>&emsp; <span className=\"texto\">'{name_column}'</span>: <span className=\"string\">'String'</span>,</p>\n                          </React.Fragment>\n                        ))\n                      ))\n                    }\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                              Object.keys(list.columns_numeric).map((number_column, index) => (\n                                <React.Fragment>\n                                  <p className=\"index\"> </p>\n                                  <p>&emsp; <span className=\"texto\">'{list.columns_numeric[number_column]}'</span>: <span className=\"number\">Number</span>,</p>\n                                </React.Fragment>\n                              ))\n                      ))\n                    }\n\n                  <p className=\"index\">8</p>\n                  <p>&#125;</p>\n\n                  <p className=\"index\">9</p>\n                  <p>input_dict <span className=\"igual\">=</span> &#123;name: tf.<span className=\"tensorflow\">convert_to_tensor</span>([value]) <span className=\"for\">for</span> name, value <span className=\"for\">in</span> sample.<span className=\"tensorflow\">items</span>()&#125;</p>\n\n                  <p className=\"index\">10</p>\n                  <p className=\"comentario\"># Llamar al método y predecir</p>\n\n                  <p className=\"index\">11</p>\n                  <p>predictions <span className=\"igual\">=</span> model.<span className=\"tensorflow\">predict</span>(input_dict)</p>\n\n                  <p className=\"index\">12</p>\n                  <p>prob <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">nn</span>.<span className=\"tensorflow\">sigmoid</span>(predictions[<span className=\"number\">0</span>])</p>\n\n                  <p className=\"index\">13</p>\n                  <p>number <span className=\"igual\">=</span> prob.<span className=\"tensorflow\">numpy</span>().<span className=\"tensorflow\">round</span>().<span className=\"tensorflow\">astype</span>(int)</p>\n\n                  <p className=\"index\">14</p>\n                  <p>result_predict <span className=\"igual\">=</span> class_names[number[<span className=\"number\">0</span>]]</p>\n\n                  <p className=\"index\">15</p>\n                  <p>percentage_predict <span className=\"igual\">=</span> <span className=\"type\">int</span>(prob.<span className=\"tensorflow\">numpy</span>()[<span className=\"number\">0</span>] * <span className=\"number\">100</span>)</p>\n              </div>\n            </div>\n        }\n\n        { this.state.loagind_training === 2  &&\n          this.state.red_neuronal_type === 'number'  &&\n            <div className=\"terminal_consult_red_neuronal_wrapper\">\n              <div className=\"terminal_consult_red_neuronal_header\">\n                <div className=\"circulored\"></div>\n                <div className=\"circuloyellow\"></div>\n                <div className=\"circulocalipso\"></div>\n                <h2 className=\"terminal_consult_red_neuronal_title\">Utilice el modelo entrenado para hacer predicciones en python</h2>\n              </div>\n              <div className=\"terminal_consult_red_neuronal_row_grid\">\n                  <p className=\"index\">1</p>\n                  <p><span className=\"igual\">import</span> tensorflow <span className=\"igual\">as</span> tf</p>\n\n                  <p className=\"index\">2</p>\n                  <p className=\"comentario\"># Cargar el modelo</p>\n\n                  <p className=\"index\">3</p>\n                  <p>model <span className=\"igual\">=</span> tf.<span className=\"tensorflow\">keras</span>.<span className=\"tensorflow\">models</span>.<span className=\"tensorflow\">load_model</span>(<span className=\"texto\">'C:/Users/56975/Downloads/modelo_red_neuronal'</span>)</p>\n\n                  <p className=\"index\">4</p>\n                  <p className=\"comentario\"># Datos necesarios para la predicción</p>\n\n                  <p className=\"index\">5</p>\n                  <p>sample <span className=\"igual\">=</span> &#123; </p>\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                        Object.keys(list.columnas_categoricas_onehot_json).map((name_column, index) => (\n                          <React.Fragment>\n                            <p className=\"index\"> </p>\n                            <p>&emsp; <span className=\"texto\">'{name_column}'</span>: <span className=\"string\">'String'</span>,</p>\n                          </React.Fragment>\n                        ))\n                      ))\n                    }\n                    {\n                      this.state.datos_entrenamiento.map((list) => (\n                              Object.keys(list.columns_numeric).map((number_column, index) => (\n                                <React.Fragment>\n                                  <p className=\"index\"> </p>\n                                  <p>&emsp; <span className=\"texto\">'{list.columns_numeric[number_column]}'</span>: <span className=\"number\">Number</span>,</p>\n                                </React.Fragment>\n                              ))\n                      ))\n                    }\n\n                  <p className=\"index\">6</p>\n                  <p>&#125;</p>\n\n                  <p className=\"index\">7</p>\n                  <p>input_dict <span className=\"igual\">=</span> &#123;name: tf.<span className=\"tensorflow\">convert_to_tensor</span>([value]) <span className=\"for\">for</span> name, value <span className=\"for\">in</span> sample.<span className=\"tensorflow\">items</span>()&#125;</p>\n\n                  <p className=\"index\">8</p>\n                  <p className=\"comentario\"># Llamar al método y predecir</p>\n\n                  <p className=\"index\">9</p>\n                  <p>predictions <span className=\"igual\">=</span> model.<span className=\"tensorflow\">predict</span>(input_dict)</p>\n\n                  <p className=\"index\">10</p>\n                  <p>result_predict = predictions[<span className=\"number\">0</span>][<span className=\"number\">0</span>]</p>\n              </div>\n            </div>\n        }\n\n\n\n\n        <div id=\"task-container\" style= {{ 'display': 'none'}}>\n          <div id=\"form-wrapper\">\n            <form onSubmit={this.handleSubmit} id=\"form\">\n              <div className=\"flex-wrapper\">\n                <div style={{flex:6}}>\n                  <input onChange={this.handleChange} className=\"form-control\" id=\"title\" value={this.state.activeItem.title} type=\"text\" name=\"title\" placeholder=\"Add task..\" />\n                </div>\n\n                <div style={{flex:1}}>\n                  <input className=\"btn btn-warning\" id=\"submit\" type=\"submit\" name=\"Add\" />\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <div id=\"list-wrapper\">\n            {tasks.map(function(tasks, index){\n              return(\n                <div key={index} className=\"task-wrapper flex-wrapper\">\n                  <div onClick={() => self.strikeUnstrike(tasks)} style={{flex:7}}>\n\n                    {tasks.completed == false ? (\n                      <span>{tasks.title}</span>\n                    ) : (\n                      <strike>{tasks.title}</strike>\n                    )}\n\n                  </div>\n                  <div style={{flex:1}}>\n                    <button onClick={() => self.startEdit(tasks)} className=\"btn btn-sm btn-outline-info\">Edit</button>\n                  </div>\n\n                  <div style={{flex:1}}>\n                  <button onClick={() => self.deleteItem(tasks)} className=\"btn btn-sm btn-outline-info\">-</button>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":17,"nodeType":"74","messageId":"75","endLine":2,"endColumn":25},{"ruleId":"72","severity":1,"message":"76","line":4,"column":21,"nodeType":"74","messageId":"75","endLine":4,"endColumn":28},{"ruleId":"72","severity":1,"message":"77","line":4,"column":30,"nodeType":"74","messageId":"75","endLine":4,"endColumn":37},{"ruleId":"72","severity":1,"message":"78","line":4,"column":39,"nodeType":"74","messageId":"75","endLine":4,"endColumn":53},{"ruleId":"72","severity":1,"message":"79","line":208,"column":9,"nodeType":"74","messageId":"75","endLine":208,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":243,"column":27,"nodeType":"82","messageId":"83","endLine":243,"endColumn":29},{"ruleId":"80","severity":1,"message":"81","line":366,"column":23,"nodeType":"82","messageId":"83","endLine":366,"endColumn":25},{"ruleId":"72","severity":1,"message":"84","line":435,"column":11,"nodeType":"74","messageId":"75","endLine":435,"endColumn":17},{"ruleId":"80","severity":1,"message":"85","line":452,"column":40,"nodeType":"82","messageId":"83","endLine":452,"endColumn":42},{"ruleId":"86","severity":1,"message":"87","line":481,"column":36,"nodeType":"88","messageId":"89","endLine":483,"endColumn":12},{"ruleId":"90","severity":1,"message":"91","line":481,"column":46,"nodeType":"88","messageId":"92","endLine":481,"endColumn":48},{"ruleId":"93","severity":1,"message":"94","line":488,"column":18,"nodeType":"74","messageId":"95","endLine":488,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":489,"column":16,"nodeType":"82","messageId":"83","endLine":489,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":494,"column":38,"nodeType":"88","messageId":"89","endLine":496,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":494,"column":48,"nodeType":"88","messageId":"92","endLine":494,"endColumn":50},{"ruleId":"86","severity":1,"message":"87","line":502,"column":38,"nodeType":"88","messageId":"89","endLine":504,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":502,"column":48,"nodeType":"88","messageId":"92","endLine":502,"endColumn":50},{"ruleId":"80","severity":1,"message":"85","line":511,"column":40,"nodeType":"82","messageId":"83","endLine":511,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":516,"column":14,"nodeType":"74","messageId":"95","endLine":516,"endColumn":15},{"ruleId":"80","severity":1,"message":"81","line":521,"column":30,"nodeType":"82","messageId":"83","endLine":521,"endColumn":32},{"ruleId":"80","severity":1,"message":"81","line":536,"column":22,"nodeType":"82","messageId":"83","endLine":536,"endColumn":24},{"ruleId":"96","severity":1,"message":"97","line":692,"column":17,"nodeType":"98","endLine":692,"endColumn":97},{"ruleId":"96","severity":1,"message":"97","line":719,"column":57,"nodeType":"98","endLine":719,"endColumn":124},{"ruleId":"96","severity":1,"message":"97","line":752,"column":15,"nodeType":"98","endLine":752,"endColumn":82},{"ruleId":"96","severity":1,"message":"97","line":788,"column":21,"nodeType":"98","endLine":788,"endColumn":85},{"ruleId":"99","severity":1,"message":"100","line":794,"column":19,"nodeType":"98","messageId":"101","endLine":794,"endColumn":102,"fix":"102"},{"ruleId":"90","severity":1,"message":"103","line":812,"column":46,"nodeType":"104","messageId":"105","endLine":812,"endColumn":54},{"ruleId":"80","severity":1,"message":"85","line":813,"column":45,"nodeType":"82","messageId":"83","endLine":813,"endColumn":47},{"ruleId":"96","severity":1,"message":"97","line":817,"column":23,"nodeType":"98","endLine":817,"endColumn":90},{"ruleId":"80","severity":1,"message":"85","line":852,"column":92,"nodeType":"82","messageId":"83","endLine":852,"endColumn":94},{"ruleId":"90","severity":1,"message":"103","line":872,"column":46,"nodeType":"104","messageId":"105","endLine":872,"endColumn":54},{"ruleId":"96","severity":1,"message":"97","line":876,"column":19,"nodeType":"98","endLine":876,"endColumn":97},{"ruleId":"96","severity":1,"message":"97","line":877,"column":115,"nodeType":"98","endLine":877,"endColumn":174},{"ruleId":"96","severity":1,"message":"97","line":898,"column":19,"nodeType":"98","endLine":898,"endColumn":97},{"ruleId":"96","severity":1,"message":"97","line":899,"column":115,"nodeType":"98","endLine":899,"endColumn":174},{"ruleId":"90","severity":1,"message":"103","line":934,"column":69,"nodeType":"104","messageId":"105","endLine":934,"endColumn":77},{"ruleId":"80","severity":1,"message":"81","line":940,"column":67,"nodeType":"82","messageId":"83","endLine":940,"endColumn":69},{"ruleId":"80","severity":1,"message":"81","line":950,"column":67,"nodeType":"82","messageId":"83","endLine":950,"endColumn":69},{"ruleId":"90","severity":1,"message":"103","line":987,"column":53,"nodeType":"104","messageId":"105","endLine":987,"endColumn":61},{"ruleId":"80","severity":1,"message":"85","line":988,"column":51,"nodeType":"82","messageId":"83","endLine":988,"endColumn":53},{"ruleId":"90","severity":1,"message":"103","line":1018,"column":69,"nodeType":"104","messageId":"105","endLine":1018,"endColumn":77},{"ruleId":"80","severity":1,"message":"81","line":1024,"column":67,"nodeType":"82","messageId":"83","endLine":1024,"endColumn":69},{"ruleId":"80","severity":1,"message":"81","line":1034,"column":67,"nodeType":"82","messageId":"83","endLine":1034,"endColumn":69},{"ruleId":"90","severity":1,"message":"103","line":1071,"column":53,"nodeType":"104","messageId":"105","endLine":1071,"endColumn":61},{"ruleId":"80","severity":1,"message":"85","line":1072,"column":51,"nodeType":"82","messageId":"83","endLine":1072,"endColumn":53},{"ruleId":"90","severity":1,"message":"103","line":1102,"column":69,"nodeType":"104","messageId":"105","endLine":1102,"endColumn":77},{"ruleId":"80","severity":1,"message":"81","line":1108,"column":67,"nodeType":"82","messageId":"83","endLine":1108,"endColumn":69},{"ruleId":"80","severity":1,"message":"81","line":1118,"column":67,"nodeType":"82","messageId":"83","endLine":1118,"endColumn":69},{"ruleId":"96","severity":1,"message":"97","line":1164,"column":19,"nodeType":"98","endLine":1164,"endColumn":76},{"ruleId":"80","severity":1,"message":"81","line":1525,"column":38,"nodeType":"82","messageId":"83","endLine":1525,"endColumn":40},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'MiniMap' is defined but never used.","'addEdge' is defined but never used.","'removeElements' is defined but never used.","'csrftoken' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onLoad' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'i'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-redeclare","'i' is already defined.","redeclared","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"108","text":"109"},"Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",[30747,30747]," rel=\"noreferrer\""]